// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMessage.proto

package com.randioo.box.protocol;

public final class ServerMessage {
  private ServerMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class SC extends
      com.google.protobuf.GeneratedMessage {
    // Use SC.newBuilder() to construct.
    private SC() {
      initFields();
    }
    private SC(boolean noInit) {}
    
    private static final SC defaultInstance;
    public static SC getDefaultInstance() {
      return defaultInstance;
    }
    
    public SC getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.box.protocol.ServerMessage.internal_static_com_randioo_mahjong_public_server_protocol_SC_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.box.protocol.ServerMessage.internal_static_com_randioo_mahjong_public_server_protocol_SC_fieldAccessorTable;
    }
    
    // optional .com.randioo.mahjong_public_server.protocol.HeartResponse HeartResponse = 1;
    public static final int HEARTRESPONSE_FIELD_NUMBER = 1;
    private boolean hasHeartResponse;
    private com.randioo.box.protocol.Heart.HeartResponse heartResponse_;
    public boolean hasHeartResponse() { return hasHeartResponse; }
    public com.randioo.box.protocol.Heart.HeartResponse getHeartResponse() { return heartResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCHeart SCHeart = 2;
    public static final int SCHEART_FIELD_NUMBER = 2;
    private boolean hasSCHeart;
    private com.randioo.box.protocol.Heart.SCHeart sCHeart_;
    public boolean hasSCHeart() { return hasSCHeart; }
    public com.randioo.box.protocol.Heart.SCHeart getSCHeart() { return sCHeart_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.LoginCheckAccountResponse LoginCheckAccountResponse = 3;
    public static final int LOGINCHECKACCOUNTRESPONSE_FIELD_NUMBER = 3;
    private boolean hasLoginCheckAccountResponse;
    private com.randioo.box.protocol.Login.LoginCheckAccountResponse loginCheckAccountResponse_;
    public boolean hasLoginCheckAccountResponse() { return hasLoginCheckAccountResponse; }
    public com.randioo.box.protocol.Login.LoginCheckAccountResponse getLoginCheckAccountResponse() { return loginCheckAccountResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.LoginCreateRoleResponse LoginCreateRoleResponse = 4;
    public static final int LOGINCREATEROLERESPONSE_FIELD_NUMBER = 4;
    private boolean hasLoginCreateRoleResponse;
    private com.randioo.box.protocol.Login.LoginCreateRoleResponse loginCreateRoleResponse_;
    public boolean hasLoginCreateRoleResponse() { return hasLoginCreateRoleResponse; }
    public com.randioo.box.protocol.Login.LoginCreateRoleResponse getLoginCreateRoleResponse() { return loginCreateRoleResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.LoginGetRoleDataResponse LoginGetRoleDataResponse = 5;
    public static final int LOGINGETROLEDATARESPONSE_FIELD_NUMBER = 5;
    private boolean hasLoginGetRoleDataResponse;
    private com.randioo.box.protocol.Login.LoginGetRoleDataResponse loginGetRoleDataResponse_;
    public boolean hasLoginGetRoleDataResponse() { return hasLoginGetRoleDataResponse; }
    public com.randioo.box.protocol.Login.LoginGetRoleDataResponse getLoginGetRoleDataResponse() { return loginGetRoleDataResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCLoginOtherSide SCLoginOtherSide = 6;
    public static final int SCLOGINOTHERSIDE_FIELD_NUMBER = 6;
    private boolean hasSCLoginOtherSide;
    private com.randioo.box.protocol.Login.SCLoginOtherSide sCLoginOtherSide_;
    public boolean hasSCLoginOtherSide() { return hasSCLoginOtherSide; }
    public com.randioo.box.protocol.Login.SCLoginOtherSide getSCLoginOtherSide() { return sCLoginOtherSide_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RoleRenameResponse RoleRenameResponse = 7;
    public static final int ROLERENAMERESPONSE_FIELD_NUMBER = 7;
    private boolean hasRoleRenameResponse;
    private com.randioo.box.protocol.Role.RoleRenameResponse roleRenameResponse_;
    public boolean hasRoleRenameResponse() { return hasRoleRenameResponse; }
    public com.randioo.box.protocol.Role.RoleRenameResponse getRoleRenameResponse() { return roleRenameResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RoleGetRoleDataResponse RoleGetRoleDataResponse = 8;
    public static final int ROLEGETROLEDATARESPONSE_FIELD_NUMBER = 8;
    private boolean hasRoleGetRoleDataResponse;
    private com.randioo.box.protocol.Role.RoleGetRoleDataResponse roleGetRoleDataResponse_;
    public boolean hasRoleGetRoleDataResponse() { return hasRoleGetRoleDataResponse; }
    public com.randioo.box.protocol.Role.RoleGetRoleDataResponse getRoleGetRoleDataResponse() { return roleGetRoleDataResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.MatchCreateGameResponse MatchCreateGameResponse = 9;
    public static final int MATCHCREATEGAMERESPONSE_FIELD_NUMBER = 9;
    private boolean hasMatchCreateGameResponse;
    private com.randioo.box.protocol.Match.MatchCreateGameResponse matchCreateGameResponse_;
    public boolean hasMatchCreateGameResponse() { return hasMatchCreateGameResponse; }
    public com.randioo.box.protocol.Match.MatchCreateGameResponse getMatchCreateGameResponse() { return matchCreateGameResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.MatchJoinGameResponse MatchJoinGameResponse = 10;
    public static final int MATCHJOINGAMERESPONSE_FIELD_NUMBER = 10;
    private boolean hasMatchJoinGameResponse;
    private com.randioo.box.protocol.Match.MatchJoinGameResponse matchJoinGameResponse_;
    public boolean hasMatchJoinGameResponse() { return hasMatchJoinGameResponse; }
    public com.randioo.box.protocol.Match.MatchJoinGameResponse getMatchJoinGameResponse() { return matchJoinGameResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCMatchJoinGame SCMatchJoinGame = 11;
    public static final int SCMATCHJOINGAME_FIELD_NUMBER = 11;
    private boolean hasSCMatchJoinGame;
    private com.randioo.box.protocol.Match.SCMatchJoinGame sCMatchJoinGame_;
    public boolean hasSCMatchJoinGame() { return hasSCMatchJoinGame; }
    public com.randioo.box.protocol.Match.SCMatchJoinGame getSCMatchJoinGame() { return sCMatchJoinGame_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCMatchMineInfo SCMatchMineInfo = 12;
    public static final int SCMATCHMINEINFO_FIELD_NUMBER = 12;
    private boolean hasSCMatchMineInfo;
    private com.randioo.box.protocol.Match.SCMatchMineInfo sCMatchMineInfo_;
    public boolean hasSCMatchMineInfo() { return hasSCMatchMineInfo; }
    public com.randioo.box.protocol.Match.SCMatchMineInfo getSCMatchMineInfo() { return sCMatchMineInfo_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCMatchCreateGame SCMatchCreateGame = 13;
    public static final int SCMATCHCREATEGAME_FIELD_NUMBER = 13;
    private boolean hasSCMatchCreateGame;
    private com.randioo.box.protocol.Match.SCMatchCreateGame sCMatchCreateGame_;
    public boolean hasSCMatchCreateGame() { return hasSCMatchCreateGame; }
    public com.randioo.box.protocol.Match.SCMatchCreateGame getSCMatchCreateGame() { return sCMatchCreateGame_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightNoticeReady SCFightNoticeReady = 14;
    public static final int SCFIGHTNOTICEREADY_FIELD_NUMBER = 14;
    private boolean hasSCFightNoticeReady;
    private com.randioo.box.protocol.Fight.SCFightNoticeReady sCFightNoticeReady_;
    public boolean hasSCFightNoticeReady() { return hasSCFightNoticeReady; }
    public com.randioo.box.protocol.Fight.SCFightNoticeReady getSCFightNoticeReady() { return sCFightNoticeReady_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightReadyResponse FightReadyResponse = 15;
    public static final int FIGHTREADYRESPONSE_FIELD_NUMBER = 15;
    private boolean hasFightReadyResponse;
    private com.randioo.box.protocol.Fight.FightReadyResponse fightReadyResponse_;
    public boolean hasFightReadyResponse() { return hasFightReadyResponse; }
    public com.randioo.box.protocol.Fight.FightReadyResponse getFightReadyResponse() { return fightReadyResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightReady SCFightReady = 16;
    public static final int SCFIGHTREADY_FIELD_NUMBER = 16;
    private boolean hasSCFightReady;
    private com.randioo.box.protocol.Fight.SCFightReady sCFightReady_;
    public boolean hasSCFightReady() { return hasSCFightReady; }
    public com.randioo.box.protocol.Fight.SCFightReady getSCFightReady() { return sCFightReady_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightStart SCFightStart = 17;
    public static final int SCFIGHTSTART_FIELD_NUMBER = 17;
    private boolean hasSCFightStart;
    private com.randioo.box.protocol.Fight.SCFightStart sCFightStart_;
    public boolean hasSCFightStart() { return hasSCFightStart; }
    public com.randioo.box.protocol.Fight.SCFightStart getSCFightStart() { return sCFightStart_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightExitGameResponse FightExitGameResponse = 18;
    public static final int FIGHTEXITGAMERESPONSE_FIELD_NUMBER = 18;
    private boolean hasFightExitGameResponse;
    private com.randioo.box.protocol.Fight.FightExitGameResponse fightExitGameResponse_;
    public boolean hasFightExitGameResponse() { return hasFightExitGameResponse; }
    public com.randioo.box.protocol.Fight.FightExitGameResponse getFightExitGameResponse() { return fightExitGameResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightExitGame SCFightExitGame = 19;
    public static final int SCFIGHTEXITGAME_FIELD_NUMBER = 19;
    private boolean hasSCFightExitGame;
    private com.randioo.box.protocol.Fight.SCFightExitGame sCFightExitGame_;
    public boolean hasSCFightExitGame() { return hasSCFightExitGame; }
    public com.randioo.box.protocol.Fight.SCFightExitGame getSCFightExitGame() { return sCFightExitGame_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightApplyExitGameResponse FightApplyExitGameResponse = 20;
    public static final int FIGHTAPPLYEXITGAMERESPONSE_FIELD_NUMBER = 20;
    private boolean hasFightApplyExitGameResponse;
    private com.randioo.box.protocol.Fight.FightApplyExitGameResponse fightApplyExitGameResponse_;
    public boolean hasFightApplyExitGameResponse() { return hasFightApplyExitGameResponse; }
    public com.randioo.box.protocol.Fight.FightApplyExitGameResponse getFightApplyExitGameResponse() { return fightApplyExitGameResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightApplyExitGame SCFightApplyExitGame = 21;
    public static final int SCFIGHTAPPLYEXITGAME_FIELD_NUMBER = 21;
    private boolean hasSCFightApplyExitGame;
    private com.randioo.box.protocol.Fight.SCFightApplyExitGame sCFightApplyExitGame_;
    public boolean hasSCFightApplyExitGame() { return hasSCFightApplyExitGame; }
    public com.randioo.box.protocol.Fight.SCFightApplyExitGame getSCFightApplyExitGame() { return sCFightApplyExitGame_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightAgreeExitGameResponse FightAgreeExitGameResponse = 22;
    public static final int FIGHTAGREEEXITGAMERESPONSE_FIELD_NUMBER = 22;
    private boolean hasFightAgreeExitGameResponse;
    private com.randioo.box.protocol.Fight.FightAgreeExitGameResponse fightAgreeExitGameResponse_;
    public boolean hasFightAgreeExitGameResponse() { return hasFightAgreeExitGameResponse; }
    public com.randioo.box.protocol.Fight.FightAgreeExitGameResponse getFightAgreeExitGameResponse() { return fightAgreeExitGameResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightGameDismiss SCFightGameDismiss = 23;
    public static final int SCFIGHTGAMEDISMISS_FIELD_NUMBER = 23;
    private boolean hasSCFightGameDismiss;
    private com.randioo.box.protocol.Fight.SCFightGameDismiss sCFightGameDismiss_;
    public boolean hasSCFightGameDismiss() { return hasSCFightGameDismiss; }
    public com.randioo.box.protocol.Fight.SCFightGameDismiss getSCFightGameDismiss() { return sCFightGameDismiss_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightLoadResource SCFightLoadResource = 24;
    public static final int SCFIGHTLOADRESOURCE_FIELD_NUMBER = 24;
    private boolean hasSCFightLoadResource;
    private com.randioo.box.protocol.Fight.SCFightLoadResource sCFightLoadResource_;
    public boolean hasSCFightLoadResource() { return hasSCFightLoadResource; }
    public com.randioo.box.protocol.Fight.SCFightLoadResource getSCFightLoadResource() { return sCFightLoadResource_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightNoticeSendCard SCFightNoticeSendCard = 25;
    public static final int SCFIGHTNOTICESENDCARD_FIELD_NUMBER = 25;
    private boolean hasSCFightNoticeSendCard;
    private com.randioo.box.protocol.Fight.SCFightNoticeSendCard sCFightNoticeSendCard_;
    public boolean hasSCFightNoticeSendCard() { return hasSCFightNoticeSendCard; }
    public com.randioo.box.protocol.Fight.SCFightNoticeSendCard getSCFightNoticeSendCard() { return sCFightNoticeSendCard_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightSendCardResponse FightSendCardResponse = 26;
    public static final int FIGHTSENDCARDRESPONSE_FIELD_NUMBER = 26;
    private boolean hasFightSendCardResponse;
    private com.randioo.box.protocol.Fight.FightSendCardResponse fightSendCardResponse_;
    public boolean hasFightSendCardResponse() { return hasFightSendCardResponse; }
    public com.randioo.box.protocol.Fight.FightSendCardResponse getFightSendCardResponse() { return fightSendCardResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightSendCard SCFightSendCard = 27;
    public static final int SCFIGHTSENDCARD_FIELD_NUMBER = 27;
    private boolean hasSCFightSendCard;
    private com.randioo.box.protocol.Fight.SCFightSendCard sCFightSendCard_;
    public boolean hasSCFightSendCard() { return hasSCFightSendCard; }
    public com.randioo.box.protocol.Fight.SCFightSendCard getSCFightSendCard() { return sCFightSendCard_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCAgreeExitGame SCAgreeExitGame = 28;
    public static final int SCAGREEEXITGAME_FIELD_NUMBER = 28;
    private boolean hasSCAgreeExitGame;
    private com.randioo.box.protocol.Fight.SCAgreeExitGame sCAgreeExitGame_;
    public boolean hasSCAgreeExitGame() { return hasSCAgreeExitGame; }
    public com.randioo.box.protocol.Fight.SCAgreeExitGame getSCAgreeExitGame() { return sCAgreeExitGame_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightRoundOver SCFightRoundOver = 29;
    public static final int SCFIGHTROUNDOVER_FIELD_NUMBER = 29;
    private boolean hasSCFightRoundOver;
    private com.randioo.box.protocol.Fight.SCFightRoundOver sCFightRoundOver_;
    public boolean hasSCFightRoundOver() { return hasSCFightRoundOver; }
    public com.randioo.box.protocol.Fight.SCFightRoundOver getSCFightRoundOver() { return sCFightRoundOver_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightRecommandResponse FightRecommandResponse = 30;
    public static final int FIGHTRECOMMANDRESPONSE_FIELD_NUMBER = 30;
    private boolean hasFightRecommandResponse;
    private com.randioo.box.protocol.Fight.FightRecommandResponse fightRecommandResponse_;
    public boolean hasFightRecommandResponse() { return hasFightRecommandResponse; }
    public com.randioo.box.protocol.Fight.FightRecommandResponse getFightRecommandResponse() { return fightRecommandResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightGameOver SCFightGameOver = 31;
    public static final int SCFIGHTGAMEOVER_FIELD_NUMBER = 31;
    private boolean hasSCFightGameOver;
    private com.randioo.box.protocol.Fight.SCFightGameOver sCFightGameOver_;
    public boolean hasSCFightGameOver() { return hasSCFightGameOver; }
    public com.randioo.box.protocol.Fight.SCFightGameOver getSCFightGameOver() { return sCFightGameOver_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightGetlastRoundResponse FightGetlastRoundResponse = 32;
    public static final int FIGHTGETLASTROUNDRESPONSE_FIELD_NUMBER = 32;
    private boolean hasFightGetlastRoundResponse;
    private com.randioo.box.protocol.Fight.FightGetlastRoundResponse fightGetlastRoundResponse_;
    public boolean hasFightGetlastRoundResponse() { return hasFightGetlastRoundResponse; }
    public com.randioo.box.protocol.Fight.FightGetlastRoundResponse getFightGetlastRoundResponse() { return fightGetlastRoundResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightTouchCard SCFightTouchCard = 33;
    public static final int SCFIGHTTOUCHCARD_FIELD_NUMBER = 33;
    private boolean hasSCFightTouchCard;
    private com.randioo.box.protocol.Fight.SCFightTouchCard sCFightTouchCard_;
    public boolean hasSCFightTouchCard() { return hasSCFightTouchCard; }
    public com.randioo.box.protocol.Fight.SCFightTouchCard getSCFightTouchCard() { return sCFightTouchCard_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightNoticeChooseCardList SCFightNoticeChooseCardList = 34;
    public static final int SCFIGHTNOTICECHOOSECARDLIST_FIELD_NUMBER = 34;
    private boolean hasSCFightNoticeChooseCardList;
    private com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList sCFightNoticeChooseCardList_;
    public boolean hasSCFightNoticeChooseCardList() { return hasSCFightNoticeChooseCardList; }
    public com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList getSCFightNoticeChooseCardList() { return sCFightNoticeChooseCardList_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightPengResponse FightPengResponse = 35;
    public static final int FIGHTPENGRESPONSE_FIELD_NUMBER = 35;
    private boolean hasFightPengResponse;
    private com.randioo.box.protocol.Fight.FightPengResponse fightPengResponse_;
    public boolean hasFightPengResponse() { return hasFightPengResponse; }
    public com.randioo.box.protocol.Fight.FightPengResponse getFightPengResponse() { return fightPengResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightGangResponse FightGangResponse = 36;
    public static final int FIGHTGANGRESPONSE_FIELD_NUMBER = 36;
    private boolean hasFightGangResponse;
    private com.randioo.box.protocol.Fight.FightGangResponse fightGangResponse_;
    public boolean hasFightGangResponse() { return hasFightGangResponse; }
    public com.randioo.box.protocol.Fight.FightGangResponse getFightGangResponse() { return fightGangResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightHuResponse FightHuResponse = 37;
    public static final int FIGHTHURESPONSE_FIELD_NUMBER = 37;
    private boolean hasFightHuResponse;
    private com.randioo.box.protocol.Fight.FightHuResponse fightHuResponse_;
    public boolean hasFightHuResponse() { return hasFightHuResponse; }
    public com.randioo.box.protocol.Fight.FightHuResponse getFightHuResponse() { return fightHuResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightHu SCFightHu = 38;
    public static final int SCFIGHTHU_FIELD_NUMBER = 38;
    private boolean hasSCFightHu;
    private com.randioo.box.protocol.Fight.SCFightHu sCFightHu_;
    public boolean hasSCFightHu() { return hasSCFightHu; }
    public com.randioo.box.protocol.Fight.SCFightHu getSCFightHu() { return sCFightHu_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightGuoResponse FightGuoResponse = 39;
    public static final int FIGHTGUORESPONSE_FIELD_NUMBER = 39;
    private boolean hasFightGuoResponse;
    private com.randioo.box.protocol.Fight.FightGuoResponse fightGuoResponse_;
    public boolean hasFightGuoResponse() { return hasFightGuoResponse; }
    public com.randioo.box.protocol.Fight.FightGuoResponse getFightGuoResponse() { return fightGuoResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightGuo SCFightGuo = 40;
    public static final int SCFIGHTGUO_FIELD_NUMBER = 40;
    private boolean hasSCFightGuo;
    private com.randioo.box.protocol.Fight.SCFightGuo sCFightGuo_;
    public boolean hasSCFightGuo() { return hasSCFightGuo; }
    public com.randioo.box.protocol.Fight.SCFightGuo getSCFightGuo() { return sCFightGuo_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightCountdown SCFightCountdown = 41;
    public static final int SCFIGHTCOUNTDOWN_FIELD_NUMBER = 41;
    private boolean hasSCFightCountdown;
    private com.randioo.box.protocol.Fight.SCFightCountdown sCFightCountdown_;
    public boolean hasSCFightCountdown() { return hasSCFightCountdown; }
    public com.randioo.box.protocol.Fight.SCFightCountdown getSCFightCountdown() { return sCFightCountdown_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightCardList SCFightCardList = 42;
    public static final int SCFIGHTCARDLIST_FIELD_NUMBER = 42;
    private boolean hasSCFightCardList;
    private com.randioo.box.protocol.Fight.SCFightCardList sCFightCardList_;
    public boolean hasSCFightCardList() { return hasSCFightCardList; }
    public com.randioo.box.protocol.Fight.SCFightCardList getSCFightCardList() { return sCFightCardList_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightPointSeat SCFightPointSeat = 43;
    public static final int SCFIGHTPOINTSEAT_FIELD_NUMBER = 43;
    private boolean hasSCFightPointSeat;
    private com.randioo.box.protocol.Fight.SCFightPointSeat sCFightPointSeat_;
    public boolean hasSCFightPointSeat() { return hasSCFightPointSeat; }
    public com.randioo.box.protocol.Fight.SCFightPointSeat getSCFightPointSeat() { return sCFightPointSeat_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightApplyExitResult SCFightApplyExitResult = 44;
    public static final int SCFIGHTAPPLYEXITRESULT_FIELD_NUMBER = 44;
    private boolean hasSCFightApplyExitResult;
    private com.randioo.box.protocol.Fight.SCFightApplyExitResult sCFightApplyExitResult_;
    public boolean hasSCFightApplyExitResult() { return hasSCFightApplyExitResult; }
    public com.randioo.box.protocol.Fight.SCFightApplyExitResult getSCFightApplyExitResult() { return sCFightApplyExitResult_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCFightDisconnect SCFightDisconnect = 45;
    public static final int SCFIGHTDISCONNECT_FIELD_NUMBER = 45;
    private boolean hasSCFightDisconnect;
    private com.randioo.box.protocol.Fight.SCFightDisconnect sCFightDisconnect_;
    public boolean hasSCFightDisconnect() { return hasSCFightDisconnect; }
    public com.randioo.box.protocol.Fight.SCFightDisconnect getSCFightDisconnect() { return sCFightDisconnect_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightChiResponse FightChiResponse = 46;
    public static final int FIGHTCHIRESPONSE_FIELD_NUMBER = 46;
    private boolean hasFightChiResponse;
    private com.randioo.box.protocol.Fight.FightChiResponse fightChiResponse_;
    public boolean hasFightChiResponse() { return hasFightChiResponse; }
    public com.randioo.box.protocol.Fight.FightChiResponse getFightChiResponse() { return fightChiResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.MoneyExchangeResponse MoneyExchangeResponse = 47;
    public static final int MONEYEXCHANGERESPONSE_FIELD_NUMBER = 47;
    private boolean hasMoneyExchangeResponse;
    private com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse moneyExchangeResponse_;
    public boolean hasMoneyExchangeResponse() { return hasMoneyExchangeResponse; }
    public com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse getMoneyExchangeResponse() { return moneyExchangeResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SettingsResponse SettingsResponse = 48;
    public static final int SETTINGSRESPONSE_FIELD_NUMBER = 48;
    private boolean hasSettingsResponse;
    private com.randioo.box.protocol.Settings.SettingsResponse settingsResponse_;
    public boolean hasSettingsResponse() { return hasSettingsResponse; }
    public com.randioo.box.protocol.Settings.SettingsResponse getSettingsResponse() { return settingsResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SettingsShowResponse SettingsShowResponse = 49;
    public static final int SETTINGSSHOWRESPONSE_FIELD_NUMBER = 49;
    private boolean hasSettingsShowResponse;
    private com.randioo.box.protocol.Settings.SettingsShowResponse settingsShowResponse_;
    public boolean hasSettingsShowResponse() { return hasSettingsShowResponse; }
    public com.randioo.box.protocol.Settings.SettingsShowResponse getSettingsShowResponse() { return settingsShowResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RaceJoinRaceResponse RaceJoinRaceResponse = 50;
    public static final int RACEJOINRACERESPONSE_FIELD_NUMBER = 50;
    private boolean hasRaceJoinRaceResponse;
    private com.randioo.box.protocol.Race.RaceJoinRaceResponse raceJoinRaceResponse_;
    public boolean hasRaceJoinRaceResponse() { return hasRaceJoinRaceResponse; }
    public com.randioo.box.protocol.Race.RaceJoinRaceResponse getRaceJoinRaceResponse() { return raceJoinRaceResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCRaceJoinRace SCRaceJoinRace = 51;
    public static final int SCRACEJOINRACE_FIELD_NUMBER = 51;
    private boolean hasSCRaceJoinRace;
    private com.randioo.box.protocol.Race.SCRaceJoinRace sCRaceJoinRace_;
    public boolean hasSCRaceJoinRace() { return hasSCRaceJoinRace; }
    public com.randioo.box.protocol.Race.SCRaceJoinRace getSCRaceJoinRace() { return sCRaceJoinRace_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RaceShowQueueResponse RaceShowQueueResponse = 52;
    public static final int RACESHOWQUEUERESPONSE_FIELD_NUMBER = 52;
    private boolean hasRaceShowQueueResponse;
    private com.randioo.box.protocol.Race.RaceShowQueueResponse raceShowQueueResponse_;
    public boolean hasRaceShowQueueResponse() { return hasRaceShowQueueResponse; }
    public com.randioo.box.protocol.Race.RaceShowQueueResponse getRaceShowQueueResponse() { return raceShowQueueResponse_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SCRaceQueueChange SCRaceQueueChange = 53;
    public static final int SCRACEQUEUECHANGE_FIELD_NUMBER = 53;
    private boolean hasSCRaceQueueChange;
    private com.randioo.box.protocol.Race.SCRaceQueueChange sCRaceQueueChange_;
    public boolean hasSCRaceQueueChange() { return hasSCRaceQueueChange; }
    public com.randioo.box.protocol.Race.SCRaceQueueChange getSCRaceQueueChange() { return sCRaceQueueChange_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.MatchCheckRoomResponse MatchCheckRoomResponse = 54;
    public static final int MATCHCHECKROOMRESPONSE_FIELD_NUMBER = 54;
    private boolean hasMatchCheckRoomResponse;
    private com.randioo.box.protocol.Match.MatchCheckRoomResponse matchCheckRoomResponse_;
    public boolean hasMatchCheckRoomResponse() { return hasMatchCheckRoomResponse; }
    public com.randioo.box.protocol.Match.MatchCheckRoomResponse getMatchCheckRoomResponse() { return matchCheckRoomResponse_; }
    
    private void initFields() {
      heartResponse_ = com.randioo.box.protocol.Heart.HeartResponse.getDefaultInstance();
      sCHeart_ = com.randioo.box.protocol.Heart.SCHeart.getDefaultInstance();
      loginCheckAccountResponse_ = com.randioo.box.protocol.Login.LoginCheckAccountResponse.getDefaultInstance();
      loginCreateRoleResponse_ = com.randioo.box.protocol.Login.LoginCreateRoleResponse.getDefaultInstance();
      loginGetRoleDataResponse_ = com.randioo.box.protocol.Login.LoginGetRoleDataResponse.getDefaultInstance();
      sCLoginOtherSide_ = com.randioo.box.protocol.Login.SCLoginOtherSide.getDefaultInstance();
      roleRenameResponse_ = com.randioo.box.protocol.Role.RoleRenameResponse.getDefaultInstance();
      roleGetRoleDataResponse_ = com.randioo.box.protocol.Role.RoleGetRoleDataResponse.getDefaultInstance();
      matchCreateGameResponse_ = com.randioo.box.protocol.Match.MatchCreateGameResponse.getDefaultInstance();
      matchJoinGameResponse_ = com.randioo.box.protocol.Match.MatchJoinGameResponse.getDefaultInstance();
      sCMatchJoinGame_ = com.randioo.box.protocol.Match.SCMatchJoinGame.getDefaultInstance();
      sCMatchMineInfo_ = com.randioo.box.protocol.Match.SCMatchMineInfo.getDefaultInstance();
      sCMatchCreateGame_ = com.randioo.box.protocol.Match.SCMatchCreateGame.getDefaultInstance();
      sCFightNoticeReady_ = com.randioo.box.protocol.Fight.SCFightNoticeReady.getDefaultInstance();
      fightReadyResponse_ = com.randioo.box.protocol.Fight.FightReadyResponse.getDefaultInstance();
      sCFightReady_ = com.randioo.box.protocol.Fight.SCFightReady.getDefaultInstance();
      sCFightStart_ = com.randioo.box.protocol.Fight.SCFightStart.getDefaultInstance();
      fightExitGameResponse_ = com.randioo.box.protocol.Fight.FightExitGameResponse.getDefaultInstance();
      sCFightExitGame_ = com.randioo.box.protocol.Fight.SCFightExitGame.getDefaultInstance();
      fightApplyExitGameResponse_ = com.randioo.box.protocol.Fight.FightApplyExitGameResponse.getDefaultInstance();
      sCFightApplyExitGame_ = com.randioo.box.protocol.Fight.SCFightApplyExitGame.getDefaultInstance();
      fightAgreeExitGameResponse_ = com.randioo.box.protocol.Fight.FightAgreeExitGameResponse.getDefaultInstance();
      sCFightGameDismiss_ = com.randioo.box.protocol.Fight.SCFightGameDismiss.getDefaultInstance();
      sCFightLoadResource_ = com.randioo.box.protocol.Fight.SCFightLoadResource.getDefaultInstance();
      sCFightNoticeSendCard_ = com.randioo.box.protocol.Fight.SCFightNoticeSendCard.getDefaultInstance();
      fightSendCardResponse_ = com.randioo.box.protocol.Fight.FightSendCardResponse.getDefaultInstance();
      sCFightSendCard_ = com.randioo.box.protocol.Fight.SCFightSendCard.getDefaultInstance();
      sCAgreeExitGame_ = com.randioo.box.protocol.Fight.SCAgreeExitGame.getDefaultInstance();
      sCFightRoundOver_ = com.randioo.box.protocol.Fight.SCFightRoundOver.getDefaultInstance();
      fightRecommandResponse_ = com.randioo.box.protocol.Fight.FightRecommandResponse.getDefaultInstance();
      sCFightGameOver_ = com.randioo.box.protocol.Fight.SCFightGameOver.getDefaultInstance();
      fightGetlastRoundResponse_ = com.randioo.box.protocol.Fight.FightGetlastRoundResponse.getDefaultInstance();
      sCFightTouchCard_ = com.randioo.box.protocol.Fight.SCFightTouchCard.getDefaultInstance();
      sCFightNoticeChooseCardList_ = com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList.getDefaultInstance();
      fightPengResponse_ = com.randioo.box.protocol.Fight.FightPengResponse.getDefaultInstance();
      fightGangResponse_ = com.randioo.box.protocol.Fight.FightGangResponse.getDefaultInstance();
      fightHuResponse_ = com.randioo.box.protocol.Fight.FightHuResponse.getDefaultInstance();
      sCFightHu_ = com.randioo.box.protocol.Fight.SCFightHu.getDefaultInstance();
      fightGuoResponse_ = com.randioo.box.protocol.Fight.FightGuoResponse.getDefaultInstance();
      sCFightGuo_ = com.randioo.box.protocol.Fight.SCFightGuo.getDefaultInstance();
      sCFightCountdown_ = com.randioo.box.protocol.Fight.SCFightCountdown.getDefaultInstance();
      sCFightCardList_ = com.randioo.box.protocol.Fight.SCFightCardList.getDefaultInstance();
      sCFightPointSeat_ = com.randioo.box.protocol.Fight.SCFightPointSeat.getDefaultInstance();
      sCFightApplyExitResult_ = com.randioo.box.protocol.Fight.SCFightApplyExitResult.getDefaultInstance();
      sCFightDisconnect_ = com.randioo.box.protocol.Fight.SCFightDisconnect.getDefaultInstance();
      fightChiResponse_ = com.randioo.box.protocol.Fight.FightChiResponse.getDefaultInstance();
      moneyExchangeResponse_ = com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse.getDefaultInstance();
      settingsResponse_ = com.randioo.box.protocol.Settings.SettingsResponse.getDefaultInstance();
      settingsShowResponse_ = com.randioo.box.protocol.Settings.SettingsShowResponse.getDefaultInstance();
      raceJoinRaceResponse_ = com.randioo.box.protocol.Race.RaceJoinRaceResponse.getDefaultInstance();
      sCRaceJoinRace_ = com.randioo.box.protocol.Race.SCRaceJoinRace.getDefaultInstance();
      raceShowQueueResponse_ = com.randioo.box.protocol.Race.RaceShowQueueResponse.getDefaultInstance();
      sCRaceQueueChange_ = com.randioo.box.protocol.Race.SCRaceQueueChange.getDefaultInstance();
      matchCheckRoomResponse_ = com.randioo.box.protocol.Match.MatchCheckRoomResponse.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasHeartResponse()) {
        output.writeMessage(1, getHeartResponse());
      }
      if (hasSCHeart()) {
        output.writeMessage(2, getSCHeart());
      }
      if (hasLoginCheckAccountResponse()) {
        output.writeMessage(3, getLoginCheckAccountResponse());
      }
      if (hasLoginCreateRoleResponse()) {
        output.writeMessage(4, getLoginCreateRoleResponse());
      }
      if (hasLoginGetRoleDataResponse()) {
        output.writeMessage(5, getLoginGetRoleDataResponse());
      }
      if (hasSCLoginOtherSide()) {
        output.writeMessage(6, getSCLoginOtherSide());
      }
      if (hasRoleRenameResponse()) {
        output.writeMessage(7, getRoleRenameResponse());
      }
      if (hasRoleGetRoleDataResponse()) {
        output.writeMessage(8, getRoleGetRoleDataResponse());
      }
      if (hasMatchCreateGameResponse()) {
        output.writeMessage(9, getMatchCreateGameResponse());
      }
      if (hasMatchJoinGameResponse()) {
        output.writeMessage(10, getMatchJoinGameResponse());
      }
      if (hasSCMatchJoinGame()) {
        output.writeMessage(11, getSCMatchJoinGame());
      }
      if (hasSCMatchMineInfo()) {
        output.writeMessage(12, getSCMatchMineInfo());
      }
      if (hasSCMatchCreateGame()) {
        output.writeMessage(13, getSCMatchCreateGame());
      }
      if (hasSCFightNoticeReady()) {
        output.writeMessage(14, getSCFightNoticeReady());
      }
      if (hasFightReadyResponse()) {
        output.writeMessage(15, getFightReadyResponse());
      }
      if (hasSCFightReady()) {
        output.writeMessage(16, getSCFightReady());
      }
      if (hasSCFightStart()) {
        output.writeMessage(17, getSCFightStart());
      }
      if (hasFightExitGameResponse()) {
        output.writeMessage(18, getFightExitGameResponse());
      }
      if (hasSCFightExitGame()) {
        output.writeMessage(19, getSCFightExitGame());
      }
      if (hasFightApplyExitGameResponse()) {
        output.writeMessage(20, getFightApplyExitGameResponse());
      }
      if (hasSCFightApplyExitGame()) {
        output.writeMessage(21, getSCFightApplyExitGame());
      }
      if (hasFightAgreeExitGameResponse()) {
        output.writeMessage(22, getFightAgreeExitGameResponse());
      }
      if (hasSCFightGameDismiss()) {
        output.writeMessage(23, getSCFightGameDismiss());
      }
      if (hasSCFightLoadResource()) {
        output.writeMessage(24, getSCFightLoadResource());
      }
      if (hasSCFightNoticeSendCard()) {
        output.writeMessage(25, getSCFightNoticeSendCard());
      }
      if (hasFightSendCardResponse()) {
        output.writeMessage(26, getFightSendCardResponse());
      }
      if (hasSCFightSendCard()) {
        output.writeMessage(27, getSCFightSendCard());
      }
      if (hasSCAgreeExitGame()) {
        output.writeMessage(28, getSCAgreeExitGame());
      }
      if (hasSCFightRoundOver()) {
        output.writeMessage(29, getSCFightRoundOver());
      }
      if (hasFightRecommandResponse()) {
        output.writeMessage(30, getFightRecommandResponse());
      }
      if (hasSCFightGameOver()) {
        output.writeMessage(31, getSCFightGameOver());
      }
      if (hasFightGetlastRoundResponse()) {
        output.writeMessage(32, getFightGetlastRoundResponse());
      }
      if (hasSCFightTouchCard()) {
        output.writeMessage(33, getSCFightTouchCard());
      }
      if (hasSCFightNoticeChooseCardList()) {
        output.writeMessage(34, getSCFightNoticeChooseCardList());
      }
      if (hasFightPengResponse()) {
        output.writeMessage(35, getFightPengResponse());
      }
      if (hasFightGangResponse()) {
        output.writeMessage(36, getFightGangResponse());
      }
      if (hasFightHuResponse()) {
        output.writeMessage(37, getFightHuResponse());
      }
      if (hasSCFightHu()) {
        output.writeMessage(38, getSCFightHu());
      }
      if (hasFightGuoResponse()) {
        output.writeMessage(39, getFightGuoResponse());
      }
      if (hasSCFightGuo()) {
        output.writeMessage(40, getSCFightGuo());
      }
      if (hasSCFightCountdown()) {
        output.writeMessage(41, getSCFightCountdown());
      }
      if (hasSCFightCardList()) {
        output.writeMessage(42, getSCFightCardList());
      }
      if (hasSCFightPointSeat()) {
        output.writeMessage(43, getSCFightPointSeat());
      }
      if (hasSCFightApplyExitResult()) {
        output.writeMessage(44, getSCFightApplyExitResult());
      }
      if (hasSCFightDisconnect()) {
        output.writeMessage(45, getSCFightDisconnect());
      }
      if (hasFightChiResponse()) {
        output.writeMessage(46, getFightChiResponse());
      }
      if (hasMoneyExchangeResponse()) {
        output.writeMessage(47, getMoneyExchangeResponse());
      }
      if (hasSettingsResponse()) {
        output.writeMessage(48, getSettingsResponse());
      }
      if (hasSettingsShowResponse()) {
        output.writeMessage(49, getSettingsShowResponse());
      }
      if (hasRaceJoinRaceResponse()) {
        output.writeMessage(50, getRaceJoinRaceResponse());
      }
      if (hasSCRaceJoinRace()) {
        output.writeMessage(51, getSCRaceJoinRace());
      }
      if (hasRaceShowQueueResponse()) {
        output.writeMessage(52, getRaceShowQueueResponse());
      }
      if (hasSCRaceQueueChange()) {
        output.writeMessage(53, getSCRaceQueueChange());
      }
      if (hasMatchCheckRoomResponse()) {
        output.writeMessage(54, getMatchCheckRoomResponse());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasHeartResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeartResponse());
      }
      if (hasSCHeart()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSCHeart());
      }
      if (hasLoginCheckAccountResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLoginCheckAccountResponse());
      }
      if (hasLoginCreateRoleResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getLoginCreateRoleResponse());
      }
      if (hasLoginGetRoleDataResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getLoginGetRoleDataResponse());
      }
      if (hasSCLoginOtherSide()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getSCLoginOtherSide());
      }
      if (hasRoleRenameResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getRoleRenameResponse());
      }
      if (hasRoleGetRoleDataResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getRoleGetRoleDataResponse());
      }
      if (hasMatchCreateGameResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getMatchCreateGameResponse());
      }
      if (hasMatchJoinGameResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getMatchJoinGameResponse());
      }
      if (hasSCMatchJoinGame()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getSCMatchJoinGame());
      }
      if (hasSCMatchMineInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getSCMatchMineInfo());
      }
      if (hasSCMatchCreateGame()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getSCMatchCreateGame());
      }
      if (hasSCFightNoticeReady()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getSCFightNoticeReady());
      }
      if (hasFightReadyResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getFightReadyResponse());
      }
      if (hasSCFightReady()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getSCFightReady());
      }
      if (hasSCFightStart()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getSCFightStart());
      }
      if (hasFightExitGameResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getFightExitGameResponse());
      }
      if (hasSCFightExitGame()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, getSCFightExitGame());
      }
      if (hasFightApplyExitGameResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, getFightApplyExitGameResponse());
      }
      if (hasSCFightApplyExitGame()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getSCFightApplyExitGame());
      }
      if (hasFightAgreeExitGameResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, getFightAgreeExitGameResponse());
      }
      if (hasSCFightGameDismiss()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, getSCFightGameDismiss());
      }
      if (hasSCFightLoadResource()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, getSCFightLoadResource());
      }
      if (hasSCFightNoticeSendCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, getSCFightNoticeSendCard());
      }
      if (hasFightSendCardResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, getFightSendCardResponse());
      }
      if (hasSCFightSendCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, getSCFightSendCard());
      }
      if (hasSCAgreeExitGame()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, getSCAgreeExitGame());
      }
      if (hasSCFightRoundOver()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, getSCFightRoundOver());
      }
      if (hasFightRecommandResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, getFightRecommandResponse());
      }
      if (hasSCFightGameOver()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, getSCFightGameOver());
      }
      if (hasFightGetlastRoundResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, getFightGetlastRoundResponse());
      }
      if (hasSCFightTouchCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, getSCFightTouchCard());
      }
      if (hasSCFightNoticeChooseCardList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, getSCFightNoticeChooseCardList());
      }
      if (hasFightPengResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, getFightPengResponse());
      }
      if (hasFightGangResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, getFightGangResponse());
      }
      if (hasFightHuResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, getFightHuResponse());
      }
      if (hasSCFightHu()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, getSCFightHu());
      }
      if (hasFightGuoResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, getFightGuoResponse());
      }
      if (hasSCFightGuo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(40, getSCFightGuo());
      }
      if (hasSCFightCountdown()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(41, getSCFightCountdown());
      }
      if (hasSCFightCardList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(42, getSCFightCardList());
      }
      if (hasSCFightPointSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(43, getSCFightPointSeat());
      }
      if (hasSCFightApplyExitResult()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(44, getSCFightApplyExitResult());
      }
      if (hasSCFightDisconnect()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(45, getSCFightDisconnect());
      }
      if (hasFightChiResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(46, getFightChiResponse());
      }
      if (hasMoneyExchangeResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(47, getMoneyExchangeResponse());
      }
      if (hasSettingsResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(48, getSettingsResponse());
      }
      if (hasSettingsShowResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(49, getSettingsShowResponse());
      }
      if (hasRaceJoinRaceResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(50, getRaceJoinRaceResponse());
      }
      if (hasSCRaceJoinRace()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(51, getSCRaceJoinRace());
      }
      if (hasRaceShowQueueResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(52, getRaceShowQueueResponse());
      }
      if (hasSCRaceQueueChange()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(53, getSCRaceQueueChange());
      }
      if (hasMatchCheckRoomResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(54, getMatchCheckRoomResponse());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.box.protocol.ServerMessage.SC parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.box.protocol.ServerMessage.SC parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.box.protocol.ServerMessage.SC parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.box.protocol.ServerMessage.SC parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.box.protocol.ServerMessage.SC parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.box.protocol.ServerMessage.SC parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.box.protocol.ServerMessage.SC parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.box.protocol.ServerMessage.SC parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.box.protocol.ServerMessage.SC parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.box.protocol.ServerMessage.SC parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.box.protocol.ServerMessage.SC prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.box.protocol.ServerMessage.SC result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.ServerMessage.SC.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.box.protocol.ServerMessage.SC();
        return builder;
      }
      
      protected com.randioo.box.protocol.ServerMessage.SC internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.box.protocol.ServerMessage.SC();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.box.protocol.ServerMessage.SC.getDescriptor();
      }
      
      public com.randioo.box.protocol.ServerMessage.SC getDefaultInstanceForType() {
        return com.randioo.box.protocol.ServerMessage.SC.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.box.protocol.ServerMessage.SC build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.box.protocol.ServerMessage.SC buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.box.protocol.ServerMessage.SC buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.box.protocol.ServerMessage.SC returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.box.protocol.ServerMessage.SC) {
          return mergeFrom((com.randioo.box.protocol.ServerMessage.SC)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.box.protocol.ServerMessage.SC other) {
        if (other == com.randioo.box.protocol.ServerMessage.SC.getDefaultInstance()) return this;
        if (other.hasHeartResponse()) {
          mergeHeartResponse(other.getHeartResponse());
        }
        if (other.hasSCHeart()) {
          mergeSCHeart(other.getSCHeart());
        }
        if (other.hasLoginCheckAccountResponse()) {
          mergeLoginCheckAccountResponse(other.getLoginCheckAccountResponse());
        }
        if (other.hasLoginCreateRoleResponse()) {
          mergeLoginCreateRoleResponse(other.getLoginCreateRoleResponse());
        }
        if (other.hasLoginGetRoleDataResponse()) {
          mergeLoginGetRoleDataResponse(other.getLoginGetRoleDataResponse());
        }
        if (other.hasSCLoginOtherSide()) {
          mergeSCLoginOtherSide(other.getSCLoginOtherSide());
        }
        if (other.hasRoleRenameResponse()) {
          mergeRoleRenameResponse(other.getRoleRenameResponse());
        }
        if (other.hasRoleGetRoleDataResponse()) {
          mergeRoleGetRoleDataResponse(other.getRoleGetRoleDataResponse());
        }
        if (other.hasMatchCreateGameResponse()) {
          mergeMatchCreateGameResponse(other.getMatchCreateGameResponse());
        }
        if (other.hasMatchJoinGameResponse()) {
          mergeMatchJoinGameResponse(other.getMatchJoinGameResponse());
        }
        if (other.hasSCMatchJoinGame()) {
          mergeSCMatchJoinGame(other.getSCMatchJoinGame());
        }
        if (other.hasSCMatchMineInfo()) {
          mergeSCMatchMineInfo(other.getSCMatchMineInfo());
        }
        if (other.hasSCMatchCreateGame()) {
          mergeSCMatchCreateGame(other.getSCMatchCreateGame());
        }
        if (other.hasSCFightNoticeReady()) {
          mergeSCFightNoticeReady(other.getSCFightNoticeReady());
        }
        if (other.hasFightReadyResponse()) {
          mergeFightReadyResponse(other.getFightReadyResponse());
        }
        if (other.hasSCFightReady()) {
          mergeSCFightReady(other.getSCFightReady());
        }
        if (other.hasSCFightStart()) {
          mergeSCFightStart(other.getSCFightStart());
        }
        if (other.hasFightExitGameResponse()) {
          mergeFightExitGameResponse(other.getFightExitGameResponse());
        }
        if (other.hasSCFightExitGame()) {
          mergeSCFightExitGame(other.getSCFightExitGame());
        }
        if (other.hasFightApplyExitGameResponse()) {
          mergeFightApplyExitGameResponse(other.getFightApplyExitGameResponse());
        }
        if (other.hasSCFightApplyExitGame()) {
          mergeSCFightApplyExitGame(other.getSCFightApplyExitGame());
        }
        if (other.hasFightAgreeExitGameResponse()) {
          mergeFightAgreeExitGameResponse(other.getFightAgreeExitGameResponse());
        }
        if (other.hasSCFightGameDismiss()) {
          mergeSCFightGameDismiss(other.getSCFightGameDismiss());
        }
        if (other.hasSCFightLoadResource()) {
          mergeSCFightLoadResource(other.getSCFightLoadResource());
        }
        if (other.hasSCFightNoticeSendCard()) {
          mergeSCFightNoticeSendCard(other.getSCFightNoticeSendCard());
        }
        if (other.hasFightSendCardResponse()) {
          mergeFightSendCardResponse(other.getFightSendCardResponse());
        }
        if (other.hasSCFightSendCard()) {
          mergeSCFightSendCard(other.getSCFightSendCard());
        }
        if (other.hasSCAgreeExitGame()) {
          mergeSCAgreeExitGame(other.getSCAgreeExitGame());
        }
        if (other.hasSCFightRoundOver()) {
          mergeSCFightRoundOver(other.getSCFightRoundOver());
        }
        if (other.hasFightRecommandResponse()) {
          mergeFightRecommandResponse(other.getFightRecommandResponse());
        }
        if (other.hasSCFightGameOver()) {
          mergeSCFightGameOver(other.getSCFightGameOver());
        }
        if (other.hasFightGetlastRoundResponse()) {
          mergeFightGetlastRoundResponse(other.getFightGetlastRoundResponse());
        }
        if (other.hasSCFightTouchCard()) {
          mergeSCFightTouchCard(other.getSCFightTouchCard());
        }
        if (other.hasSCFightNoticeChooseCardList()) {
          mergeSCFightNoticeChooseCardList(other.getSCFightNoticeChooseCardList());
        }
        if (other.hasFightPengResponse()) {
          mergeFightPengResponse(other.getFightPengResponse());
        }
        if (other.hasFightGangResponse()) {
          mergeFightGangResponse(other.getFightGangResponse());
        }
        if (other.hasFightHuResponse()) {
          mergeFightHuResponse(other.getFightHuResponse());
        }
        if (other.hasSCFightHu()) {
          mergeSCFightHu(other.getSCFightHu());
        }
        if (other.hasFightGuoResponse()) {
          mergeFightGuoResponse(other.getFightGuoResponse());
        }
        if (other.hasSCFightGuo()) {
          mergeSCFightGuo(other.getSCFightGuo());
        }
        if (other.hasSCFightCountdown()) {
          mergeSCFightCountdown(other.getSCFightCountdown());
        }
        if (other.hasSCFightCardList()) {
          mergeSCFightCardList(other.getSCFightCardList());
        }
        if (other.hasSCFightPointSeat()) {
          mergeSCFightPointSeat(other.getSCFightPointSeat());
        }
        if (other.hasSCFightApplyExitResult()) {
          mergeSCFightApplyExitResult(other.getSCFightApplyExitResult());
        }
        if (other.hasSCFightDisconnect()) {
          mergeSCFightDisconnect(other.getSCFightDisconnect());
        }
        if (other.hasFightChiResponse()) {
          mergeFightChiResponse(other.getFightChiResponse());
        }
        if (other.hasMoneyExchangeResponse()) {
          mergeMoneyExchangeResponse(other.getMoneyExchangeResponse());
        }
        if (other.hasSettingsResponse()) {
          mergeSettingsResponse(other.getSettingsResponse());
        }
        if (other.hasSettingsShowResponse()) {
          mergeSettingsShowResponse(other.getSettingsShowResponse());
        }
        if (other.hasRaceJoinRaceResponse()) {
          mergeRaceJoinRaceResponse(other.getRaceJoinRaceResponse());
        }
        if (other.hasSCRaceJoinRace()) {
          mergeSCRaceJoinRace(other.getSCRaceJoinRace());
        }
        if (other.hasRaceShowQueueResponse()) {
          mergeRaceShowQueueResponse(other.getRaceShowQueueResponse());
        }
        if (other.hasSCRaceQueueChange()) {
          mergeSCRaceQueueChange(other.getSCRaceQueueChange());
        }
        if (other.hasMatchCheckRoomResponse()) {
          mergeMatchCheckRoomResponse(other.getMatchCheckRoomResponse());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.box.protocol.Heart.HeartResponse.Builder subBuilder = com.randioo.box.protocol.Heart.HeartResponse.newBuilder();
              if (hasHeartResponse()) {
                subBuilder.mergeFrom(getHeartResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHeartResponse(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.randioo.box.protocol.Heart.SCHeart.Builder subBuilder = com.randioo.box.protocol.Heart.SCHeart.newBuilder();
              if (hasSCHeart()) {
                subBuilder.mergeFrom(getSCHeart());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCHeart(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.randioo.box.protocol.Login.LoginCheckAccountResponse.Builder subBuilder = com.randioo.box.protocol.Login.LoginCheckAccountResponse.newBuilder();
              if (hasLoginCheckAccountResponse()) {
                subBuilder.mergeFrom(getLoginCheckAccountResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLoginCheckAccountResponse(subBuilder.buildPartial());
              break;
            }
            case 34: {
              com.randioo.box.protocol.Login.LoginCreateRoleResponse.Builder subBuilder = com.randioo.box.protocol.Login.LoginCreateRoleResponse.newBuilder();
              if (hasLoginCreateRoleResponse()) {
                subBuilder.mergeFrom(getLoginCreateRoleResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLoginCreateRoleResponse(subBuilder.buildPartial());
              break;
            }
            case 42: {
              com.randioo.box.protocol.Login.LoginGetRoleDataResponse.Builder subBuilder = com.randioo.box.protocol.Login.LoginGetRoleDataResponse.newBuilder();
              if (hasLoginGetRoleDataResponse()) {
                subBuilder.mergeFrom(getLoginGetRoleDataResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLoginGetRoleDataResponse(subBuilder.buildPartial());
              break;
            }
            case 50: {
              com.randioo.box.protocol.Login.SCLoginOtherSide.Builder subBuilder = com.randioo.box.protocol.Login.SCLoginOtherSide.newBuilder();
              if (hasSCLoginOtherSide()) {
                subBuilder.mergeFrom(getSCLoginOtherSide());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCLoginOtherSide(subBuilder.buildPartial());
              break;
            }
            case 58: {
              com.randioo.box.protocol.Role.RoleRenameResponse.Builder subBuilder = com.randioo.box.protocol.Role.RoleRenameResponse.newBuilder();
              if (hasRoleRenameResponse()) {
                subBuilder.mergeFrom(getRoleRenameResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoleRenameResponse(subBuilder.buildPartial());
              break;
            }
            case 66: {
              com.randioo.box.protocol.Role.RoleGetRoleDataResponse.Builder subBuilder = com.randioo.box.protocol.Role.RoleGetRoleDataResponse.newBuilder();
              if (hasRoleGetRoleDataResponse()) {
                subBuilder.mergeFrom(getRoleGetRoleDataResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoleGetRoleDataResponse(subBuilder.buildPartial());
              break;
            }
            case 74: {
              com.randioo.box.protocol.Match.MatchCreateGameResponse.Builder subBuilder = com.randioo.box.protocol.Match.MatchCreateGameResponse.newBuilder();
              if (hasMatchCreateGameResponse()) {
                subBuilder.mergeFrom(getMatchCreateGameResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchCreateGameResponse(subBuilder.buildPartial());
              break;
            }
            case 82: {
              com.randioo.box.protocol.Match.MatchJoinGameResponse.Builder subBuilder = com.randioo.box.protocol.Match.MatchJoinGameResponse.newBuilder();
              if (hasMatchJoinGameResponse()) {
                subBuilder.mergeFrom(getMatchJoinGameResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchJoinGameResponse(subBuilder.buildPartial());
              break;
            }
            case 90: {
              com.randioo.box.protocol.Match.SCMatchJoinGame.Builder subBuilder = com.randioo.box.protocol.Match.SCMatchJoinGame.newBuilder();
              if (hasSCMatchJoinGame()) {
                subBuilder.mergeFrom(getSCMatchJoinGame());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCMatchJoinGame(subBuilder.buildPartial());
              break;
            }
            case 98: {
              com.randioo.box.protocol.Match.SCMatchMineInfo.Builder subBuilder = com.randioo.box.protocol.Match.SCMatchMineInfo.newBuilder();
              if (hasSCMatchMineInfo()) {
                subBuilder.mergeFrom(getSCMatchMineInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCMatchMineInfo(subBuilder.buildPartial());
              break;
            }
            case 106: {
              com.randioo.box.protocol.Match.SCMatchCreateGame.Builder subBuilder = com.randioo.box.protocol.Match.SCMatchCreateGame.newBuilder();
              if (hasSCMatchCreateGame()) {
                subBuilder.mergeFrom(getSCMatchCreateGame());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCMatchCreateGame(subBuilder.buildPartial());
              break;
            }
            case 114: {
              com.randioo.box.protocol.Fight.SCFightNoticeReady.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightNoticeReady.newBuilder();
              if (hasSCFightNoticeReady()) {
                subBuilder.mergeFrom(getSCFightNoticeReady());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightNoticeReady(subBuilder.buildPartial());
              break;
            }
            case 122: {
              com.randioo.box.protocol.Fight.FightReadyResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightReadyResponse.newBuilder();
              if (hasFightReadyResponse()) {
                subBuilder.mergeFrom(getFightReadyResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightReadyResponse(subBuilder.buildPartial());
              break;
            }
            case 130: {
              com.randioo.box.protocol.Fight.SCFightReady.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightReady.newBuilder();
              if (hasSCFightReady()) {
                subBuilder.mergeFrom(getSCFightReady());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightReady(subBuilder.buildPartial());
              break;
            }
            case 138: {
              com.randioo.box.protocol.Fight.SCFightStart.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightStart.newBuilder();
              if (hasSCFightStart()) {
                subBuilder.mergeFrom(getSCFightStart());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightStart(subBuilder.buildPartial());
              break;
            }
            case 146: {
              com.randioo.box.protocol.Fight.FightExitGameResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightExitGameResponse.newBuilder();
              if (hasFightExitGameResponse()) {
                subBuilder.mergeFrom(getFightExitGameResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightExitGameResponse(subBuilder.buildPartial());
              break;
            }
            case 154: {
              com.randioo.box.protocol.Fight.SCFightExitGame.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightExitGame.newBuilder();
              if (hasSCFightExitGame()) {
                subBuilder.mergeFrom(getSCFightExitGame());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightExitGame(subBuilder.buildPartial());
              break;
            }
            case 162: {
              com.randioo.box.protocol.Fight.FightApplyExitGameResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightApplyExitGameResponse.newBuilder();
              if (hasFightApplyExitGameResponse()) {
                subBuilder.mergeFrom(getFightApplyExitGameResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightApplyExitGameResponse(subBuilder.buildPartial());
              break;
            }
            case 170: {
              com.randioo.box.protocol.Fight.SCFightApplyExitGame.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightApplyExitGame.newBuilder();
              if (hasSCFightApplyExitGame()) {
                subBuilder.mergeFrom(getSCFightApplyExitGame());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightApplyExitGame(subBuilder.buildPartial());
              break;
            }
            case 178: {
              com.randioo.box.protocol.Fight.FightAgreeExitGameResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightAgreeExitGameResponse.newBuilder();
              if (hasFightAgreeExitGameResponse()) {
                subBuilder.mergeFrom(getFightAgreeExitGameResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightAgreeExitGameResponse(subBuilder.buildPartial());
              break;
            }
            case 186: {
              com.randioo.box.protocol.Fight.SCFightGameDismiss.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightGameDismiss.newBuilder();
              if (hasSCFightGameDismiss()) {
                subBuilder.mergeFrom(getSCFightGameDismiss());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightGameDismiss(subBuilder.buildPartial());
              break;
            }
            case 194: {
              com.randioo.box.protocol.Fight.SCFightLoadResource.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightLoadResource.newBuilder();
              if (hasSCFightLoadResource()) {
                subBuilder.mergeFrom(getSCFightLoadResource());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightLoadResource(subBuilder.buildPartial());
              break;
            }
            case 202: {
              com.randioo.box.protocol.Fight.SCFightNoticeSendCard.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightNoticeSendCard.newBuilder();
              if (hasSCFightNoticeSendCard()) {
                subBuilder.mergeFrom(getSCFightNoticeSendCard());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightNoticeSendCard(subBuilder.buildPartial());
              break;
            }
            case 210: {
              com.randioo.box.protocol.Fight.FightSendCardResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightSendCardResponse.newBuilder();
              if (hasFightSendCardResponse()) {
                subBuilder.mergeFrom(getFightSendCardResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightSendCardResponse(subBuilder.buildPartial());
              break;
            }
            case 218: {
              com.randioo.box.protocol.Fight.SCFightSendCard.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightSendCard.newBuilder();
              if (hasSCFightSendCard()) {
                subBuilder.mergeFrom(getSCFightSendCard());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightSendCard(subBuilder.buildPartial());
              break;
            }
            case 226: {
              com.randioo.box.protocol.Fight.SCAgreeExitGame.Builder subBuilder = com.randioo.box.protocol.Fight.SCAgreeExitGame.newBuilder();
              if (hasSCAgreeExitGame()) {
                subBuilder.mergeFrom(getSCAgreeExitGame());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCAgreeExitGame(subBuilder.buildPartial());
              break;
            }
            case 234: {
              com.randioo.box.protocol.Fight.SCFightRoundOver.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightRoundOver.newBuilder();
              if (hasSCFightRoundOver()) {
                subBuilder.mergeFrom(getSCFightRoundOver());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightRoundOver(subBuilder.buildPartial());
              break;
            }
            case 242: {
              com.randioo.box.protocol.Fight.FightRecommandResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightRecommandResponse.newBuilder();
              if (hasFightRecommandResponse()) {
                subBuilder.mergeFrom(getFightRecommandResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightRecommandResponse(subBuilder.buildPartial());
              break;
            }
            case 250: {
              com.randioo.box.protocol.Fight.SCFightGameOver.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightGameOver.newBuilder();
              if (hasSCFightGameOver()) {
                subBuilder.mergeFrom(getSCFightGameOver());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightGameOver(subBuilder.buildPartial());
              break;
            }
            case 258: {
              com.randioo.box.protocol.Fight.FightGetlastRoundResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightGetlastRoundResponse.newBuilder();
              if (hasFightGetlastRoundResponse()) {
                subBuilder.mergeFrom(getFightGetlastRoundResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGetlastRoundResponse(subBuilder.buildPartial());
              break;
            }
            case 266: {
              com.randioo.box.protocol.Fight.SCFightTouchCard.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightTouchCard.newBuilder();
              if (hasSCFightTouchCard()) {
                subBuilder.mergeFrom(getSCFightTouchCard());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightTouchCard(subBuilder.buildPartial());
              break;
            }
            case 274: {
              com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList.newBuilder();
              if (hasSCFightNoticeChooseCardList()) {
                subBuilder.mergeFrom(getSCFightNoticeChooseCardList());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightNoticeChooseCardList(subBuilder.buildPartial());
              break;
            }
            case 282: {
              com.randioo.box.protocol.Fight.FightPengResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightPengResponse.newBuilder();
              if (hasFightPengResponse()) {
                subBuilder.mergeFrom(getFightPengResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightPengResponse(subBuilder.buildPartial());
              break;
            }
            case 290: {
              com.randioo.box.protocol.Fight.FightGangResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightGangResponse.newBuilder();
              if (hasFightGangResponse()) {
                subBuilder.mergeFrom(getFightGangResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGangResponse(subBuilder.buildPartial());
              break;
            }
            case 298: {
              com.randioo.box.protocol.Fight.FightHuResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightHuResponse.newBuilder();
              if (hasFightHuResponse()) {
                subBuilder.mergeFrom(getFightHuResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightHuResponse(subBuilder.buildPartial());
              break;
            }
            case 306: {
              com.randioo.box.protocol.Fight.SCFightHu.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightHu.newBuilder();
              if (hasSCFightHu()) {
                subBuilder.mergeFrom(getSCFightHu());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightHu(subBuilder.buildPartial());
              break;
            }
            case 314: {
              com.randioo.box.protocol.Fight.FightGuoResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightGuoResponse.newBuilder();
              if (hasFightGuoResponse()) {
                subBuilder.mergeFrom(getFightGuoResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGuoResponse(subBuilder.buildPartial());
              break;
            }
            case 322: {
              com.randioo.box.protocol.Fight.SCFightGuo.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightGuo.newBuilder();
              if (hasSCFightGuo()) {
                subBuilder.mergeFrom(getSCFightGuo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightGuo(subBuilder.buildPartial());
              break;
            }
            case 330: {
              com.randioo.box.protocol.Fight.SCFightCountdown.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightCountdown.newBuilder();
              if (hasSCFightCountdown()) {
                subBuilder.mergeFrom(getSCFightCountdown());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightCountdown(subBuilder.buildPartial());
              break;
            }
            case 338: {
              com.randioo.box.protocol.Fight.SCFightCardList.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightCardList.newBuilder();
              if (hasSCFightCardList()) {
                subBuilder.mergeFrom(getSCFightCardList());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightCardList(subBuilder.buildPartial());
              break;
            }
            case 346: {
              com.randioo.box.protocol.Fight.SCFightPointSeat.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightPointSeat.newBuilder();
              if (hasSCFightPointSeat()) {
                subBuilder.mergeFrom(getSCFightPointSeat());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightPointSeat(subBuilder.buildPartial());
              break;
            }
            case 354: {
              com.randioo.box.protocol.Fight.SCFightApplyExitResult.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightApplyExitResult.newBuilder();
              if (hasSCFightApplyExitResult()) {
                subBuilder.mergeFrom(getSCFightApplyExitResult());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightApplyExitResult(subBuilder.buildPartial());
              break;
            }
            case 362: {
              com.randioo.box.protocol.Fight.SCFightDisconnect.Builder subBuilder = com.randioo.box.protocol.Fight.SCFightDisconnect.newBuilder();
              if (hasSCFightDisconnect()) {
                subBuilder.mergeFrom(getSCFightDisconnect());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCFightDisconnect(subBuilder.buildPartial());
              break;
            }
            case 370: {
              com.randioo.box.protocol.Fight.FightChiResponse.Builder subBuilder = com.randioo.box.protocol.Fight.FightChiResponse.newBuilder();
              if (hasFightChiResponse()) {
                subBuilder.mergeFrom(getFightChiResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightChiResponse(subBuilder.buildPartial());
              break;
            }
            case 378: {
              com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse.Builder subBuilder = com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse.newBuilder();
              if (hasMoneyExchangeResponse()) {
                subBuilder.mergeFrom(getMoneyExchangeResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMoneyExchangeResponse(subBuilder.buildPartial());
              break;
            }
            case 386: {
              com.randioo.box.protocol.Settings.SettingsResponse.Builder subBuilder = com.randioo.box.protocol.Settings.SettingsResponse.newBuilder();
              if (hasSettingsResponse()) {
                subBuilder.mergeFrom(getSettingsResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSettingsResponse(subBuilder.buildPartial());
              break;
            }
            case 394: {
              com.randioo.box.protocol.Settings.SettingsShowResponse.Builder subBuilder = com.randioo.box.protocol.Settings.SettingsShowResponse.newBuilder();
              if (hasSettingsShowResponse()) {
                subBuilder.mergeFrom(getSettingsShowResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSettingsShowResponse(subBuilder.buildPartial());
              break;
            }
            case 402: {
              com.randioo.box.protocol.Race.RaceJoinRaceResponse.Builder subBuilder = com.randioo.box.protocol.Race.RaceJoinRaceResponse.newBuilder();
              if (hasRaceJoinRaceResponse()) {
                subBuilder.mergeFrom(getRaceJoinRaceResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRaceJoinRaceResponse(subBuilder.buildPartial());
              break;
            }
            case 410: {
              com.randioo.box.protocol.Race.SCRaceJoinRace.Builder subBuilder = com.randioo.box.protocol.Race.SCRaceJoinRace.newBuilder();
              if (hasSCRaceJoinRace()) {
                subBuilder.mergeFrom(getSCRaceJoinRace());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCRaceJoinRace(subBuilder.buildPartial());
              break;
            }
            case 418: {
              com.randioo.box.protocol.Race.RaceShowQueueResponse.Builder subBuilder = com.randioo.box.protocol.Race.RaceShowQueueResponse.newBuilder();
              if (hasRaceShowQueueResponse()) {
                subBuilder.mergeFrom(getRaceShowQueueResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRaceShowQueueResponse(subBuilder.buildPartial());
              break;
            }
            case 426: {
              com.randioo.box.protocol.Race.SCRaceQueueChange.Builder subBuilder = com.randioo.box.protocol.Race.SCRaceQueueChange.newBuilder();
              if (hasSCRaceQueueChange()) {
                subBuilder.mergeFrom(getSCRaceQueueChange());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSCRaceQueueChange(subBuilder.buildPartial());
              break;
            }
            case 434: {
              com.randioo.box.protocol.Match.MatchCheckRoomResponse.Builder subBuilder = com.randioo.box.protocol.Match.MatchCheckRoomResponse.newBuilder();
              if (hasMatchCheckRoomResponse()) {
                subBuilder.mergeFrom(getMatchCheckRoomResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchCheckRoomResponse(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .com.randioo.mahjong_public_server.protocol.HeartResponse HeartResponse = 1;
      public boolean hasHeartResponse() {
        return result.hasHeartResponse();
      }
      public com.randioo.box.protocol.Heart.HeartResponse getHeartResponse() {
        return result.getHeartResponse();
      }
      public Builder setHeartResponse(com.randioo.box.protocol.Heart.HeartResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHeartResponse = true;
        result.heartResponse_ = value;
        return this;
      }
      public Builder setHeartResponse(com.randioo.box.protocol.Heart.HeartResponse.Builder builderForValue) {
        result.hasHeartResponse = true;
        result.heartResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeHeartResponse(com.randioo.box.protocol.Heart.HeartResponse value) {
        if (result.hasHeartResponse() &&
            result.heartResponse_ != com.randioo.box.protocol.Heart.HeartResponse.getDefaultInstance()) {
          result.heartResponse_ =
            com.randioo.box.protocol.Heart.HeartResponse.newBuilder(result.heartResponse_).mergeFrom(value).buildPartial();
        } else {
          result.heartResponse_ = value;
        }
        result.hasHeartResponse = true;
        return this;
      }
      public Builder clearHeartResponse() {
        result.hasHeartResponse = false;
        result.heartResponse_ = com.randioo.box.protocol.Heart.HeartResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCHeart SCHeart = 2;
      public boolean hasSCHeart() {
        return result.hasSCHeart();
      }
      public com.randioo.box.protocol.Heart.SCHeart getSCHeart() {
        return result.getSCHeart();
      }
      public Builder setSCHeart(com.randioo.box.protocol.Heart.SCHeart value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCHeart = true;
        result.sCHeart_ = value;
        return this;
      }
      public Builder setSCHeart(com.randioo.box.protocol.Heart.SCHeart.Builder builderForValue) {
        result.hasSCHeart = true;
        result.sCHeart_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCHeart(com.randioo.box.protocol.Heart.SCHeart value) {
        if (result.hasSCHeart() &&
            result.sCHeart_ != com.randioo.box.protocol.Heart.SCHeart.getDefaultInstance()) {
          result.sCHeart_ =
            com.randioo.box.protocol.Heart.SCHeart.newBuilder(result.sCHeart_).mergeFrom(value).buildPartial();
        } else {
          result.sCHeart_ = value;
        }
        result.hasSCHeart = true;
        return this;
      }
      public Builder clearSCHeart() {
        result.hasSCHeart = false;
        result.sCHeart_ = com.randioo.box.protocol.Heart.SCHeart.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.LoginCheckAccountResponse LoginCheckAccountResponse = 3;
      public boolean hasLoginCheckAccountResponse() {
        return result.hasLoginCheckAccountResponse();
      }
      public com.randioo.box.protocol.Login.LoginCheckAccountResponse getLoginCheckAccountResponse() {
        return result.getLoginCheckAccountResponse();
      }
      public Builder setLoginCheckAccountResponse(com.randioo.box.protocol.Login.LoginCheckAccountResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLoginCheckAccountResponse = true;
        result.loginCheckAccountResponse_ = value;
        return this;
      }
      public Builder setLoginCheckAccountResponse(com.randioo.box.protocol.Login.LoginCheckAccountResponse.Builder builderForValue) {
        result.hasLoginCheckAccountResponse = true;
        result.loginCheckAccountResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeLoginCheckAccountResponse(com.randioo.box.protocol.Login.LoginCheckAccountResponse value) {
        if (result.hasLoginCheckAccountResponse() &&
            result.loginCheckAccountResponse_ != com.randioo.box.protocol.Login.LoginCheckAccountResponse.getDefaultInstance()) {
          result.loginCheckAccountResponse_ =
            com.randioo.box.protocol.Login.LoginCheckAccountResponse.newBuilder(result.loginCheckAccountResponse_).mergeFrom(value).buildPartial();
        } else {
          result.loginCheckAccountResponse_ = value;
        }
        result.hasLoginCheckAccountResponse = true;
        return this;
      }
      public Builder clearLoginCheckAccountResponse() {
        result.hasLoginCheckAccountResponse = false;
        result.loginCheckAccountResponse_ = com.randioo.box.protocol.Login.LoginCheckAccountResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.LoginCreateRoleResponse LoginCreateRoleResponse = 4;
      public boolean hasLoginCreateRoleResponse() {
        return result.hasLoginCreateRoleResponse();
      }
      public com.randioo.box.protocol.Login.LoginCreateRoleResponse getLoginCreateRoleResponse() {
        return result.getLoginCreateRoleResponse();
      }
      public Builder setLoginCreateRoleResponse(com.randioo.box.protocol.Login.LoginCreateRoleResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLoginCreateRoleResponse = true;
        result.loginCreateRoleResponse_ = value;
        return this;
      }
      public Builder setLoginCreateRoleResponse(com.randioo.box.protocol.Login.LoginCreateRoleResponse.Builder builderForValue) {
        result.hasLoginCreateRoleResponse = true;
        result.loginCreateRoleResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeLoginCreateRoleResponse(com.randioo.box.protocol.Login.LoginCreateRoleResponse value) {
        if (result.hasLoginCreateRoleResponse() &&
            result.loginCreateRoleResponse_ != com.randioo.box.protocol.Login.LoginCreateRoleResponse.getDefaultInstance()) {
          result.loginCreateRoleResponse_ =
            com.randioo.box.protocol.Login.LoginCreateRoleResponse.newBuilder(result.loginCreateRoleResponse_).mergeFrom(value).buildPartial();
        } else {
          result.loginCreateRoleResponse_ = value;
        }
        result.hasLoginCreateRoleResponse = true;
        return this;
      }
      public Builder clearLoginCreateRoleResponse() {
        result.hasLoginCreateRoleResponse = false;
        result.loginCreateRoleResponse_ = com.randioo.box.protocol.Login.LoginCreateRoleResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.LoginGetRoleDataResponse LoginGetRoleDataResponse = 5;
      public boolean hasLoginGetRoleDataResponse() {
        return result.hasLoginGetRoleDataResponse();
      }
      public com.randioo.box.protocol.Login.LoginGetRoleDataResponse getLoginGetRoleDataResponse() {
        return result.getLoginGetRoleDataResponse();
      }
      public Builder setLoginGetRoleDataResponse(com.randioo.box.protocol.Login.LoginGetRoleDataResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLoginGetRoleDataResponse = true;
        result.loginGetRoleDataResponse_ = value;
        return this;
      }
      public Builder setLoginGetRoleDataResponse(com.randioo.box.protocol.Login.LoginGetRoleDataResponse.Builder builderForValue) {
        result.hasLoginGetRoleDataResponse = true;
        result.loginGetRoleDataResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeLoginGetRoleDataResponse(com.randioo.box.protocol.Login.LoginGetRoleDataResponse value) {
        if (result.hasLoginGetRoleDataResponse() &&
            result.loginGetRoleDataResponse_ != com.randioo.box.protocol.Login.LoginGetRoleDataResponse.getDefaultInstance()) {
          result.loginGetRoleDataResponse_ =
            com.randioo.box.protocol.Login.LoginGetRoleDataResponse.newBuilder(result.loginGetRoleDataResponse_).mergeFrom(value).buildPartial();
        } else {
          result.loginGetRoleDataResponse_ = value;
        }
        result.hasLoginGetRoleDataResponse = true;
        return this;
      }
      public Builder clearLoginGetRoleDataResponse() {
        result.hasLoginGetRoleDataResponse = false;
        result.loginGetRoleDataResponse_ = com.randioo.box.protocol.Login.LoginGetRoleDataResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCLoginOtherSide SCLoginOtherSide = 6;
      public boolean hasSCLoginOtherSide() {
        return result.hasSCLoginOtherSide();
      }
      public com.randioo.box.protocol.Login.SCLoginOtherSide getSCLoginOtherSide() {
        return result.getSCLoginOtherSide();
      }
      public Builder setSCLoginOtherSide(com.randioo.box.protocol.Login.SCLoginOtherSide value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCLoginOtherSide = true;
        result.sCLoginOtherSide_ = value;
        return this;
      }
      public Builder setSCLoginOtherSide(com.randioo.box.protocol.Login.SCLoginOtherSide.Builder builderForValue) {
        result.hasSCLoginOtherSide = true;
        result.sCLoginOtherSide_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCLoginOtherSide(com.randioo.box.protocol.Login.SCLoginOtherSide value) {
        if (result.hasSCLoginOtherSide() &&
            result.sCLoginOtherSide_ != com.randioo.box.protocol.Login.SCLoginOtherSide.getDefaultInstance()) {
          result.sCLoginOtherSide_ =
            com.randioo.box.protocol.Login.SCLoginOtherSide.newBuilder(result.sCLoginOtherSide_).mergeFrom(value).buildPartial();
        } else {
          result.sCLoginOtherSide_ = value;
        }
        result.hasSCLoginOtherSide = true;
        return this;
      }
      public Builder clearSCLoginOtherSide() {
        result.hasSCLoginOtherSide = false;
        result.sCLoginOtherSide_ = com.randioo.box.protocol.Login.SCLoginOtherSide.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RoleRenameResponse RoleRenameResponse = 7;
      public boolean hasRoleRenameResponse() {
        return result.hasRoleRenameResponse();
      }
      public com.randioo.box.protocol.Role.RoleRenameResponse getRoleRenameResponse() {
        return result.getRoleRenameResponse();
      }
      public Builder setRoleRenameResponse(com.randioo.box.protocol.Role.RoleRenameResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRoleRenameResponse = true;
        result.roleRenameResponse_ = value;
        return this;
      }
      public Builder setRoleRenameResponse(com.randioo.box.protocol.Role.RoleRenameResponse.Builder builderForValue) {
        result.hasRoleRenameResponse = true;
        result.roleRenameResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeRoleRenameResponse(com.randioo.box.protocol.Role.RoleRenameResponse value) {
        if (result.hasRoleRenameResponse() &&
            result.roleRenameResponse_ != com.randioo.box.protocol.Role.RoleRenameResponse.getDefaultInstance()) {
          result.roleRenameResponse_ =
            com.randioo.box.protocol.Role.RoleRenameResponse.newBuilder(result.roleRenameResponse_).mergeFrom(value).buildPartial();
        } else {
          result.roleRenameResponse_ = value;
        }
        result.hasRoleRenameResponse = true;
        return this;
      }
      public Builder clearRoleRenameResponse() {
        result.hasRoleRenameResponse = false;
        result.roleRenameResponse_ = com.randioo.box.protocol.Role.RoleRenameResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RoleGetRoleDataResponse RoleGetRoleDataResponse = 8;
      public boolean hasRoleGetRoleDataResponse() {
        return result.hasRoleGetRoleDataResponse();
      }
      public com.randioo.box.protocol.Role.RoleGetRoleDataResponse getRoleGetRoleDataResponse() {
        return result.getRoleGetRoleDataResponse();
      }
      public Builder setRoleGetRoleDataResponse(com.randioo.box.protocol.Role.RoleGetRoleDataResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRoleGetRoleDataResponse = true;
        result.roleGetRoleDataResponse_ = value;
        return this;
      }
      public Builder setRoleGetRoleDataResponse(com.randioo.box.protocol.Role.RoleGetRoleDataResponse.Builder builderForValue) {
        result.hasRoleGetRoleDataResponse = true;
        result.roleGetRoleDataResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeRoleGetRoleDataResponse(com.randioo.box.protocol.Role.RoleGetRoleDataResponse value) {
        if (result.hasRoleGetRoleDataResponse() &&
            result.roleGetRoleDataResponse_ != com.randioo.box.protocol.Role.RoleGetRoleDataResponse.getDefaultInstance()) {
          result.roleGetRoleDataResponse_ =
            com.randioo.box.protocol.Role.RoleGetRoleDataResponse.newBuilder(result.roleGetRoleDataResponse_).mergeFrom(value).buildPartial();
        } else {
          result.roleGetRoleDataResponse_ = value;
        }
        result.hasRoleGetRoleDataResponse = true;
        return this;
      }
      public Builder clearRoleGetRoleDataResponse() {
        result.hasRoleGetRoleDataResponse = false;
        result.roleGetRoleDataResponse_ = com.randioo.box.protocol.Role.RoleGetRoleDataResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.MatchCreateGameResponse MatchCreateGameResponse = 9;
      public boolean hasMatchCreateGameResponse() {
        return result.hasMatchCreateGameResponse();
      }
      public com.randioo.box.protocol.Match.MatchCreateGameResponse getMatchCreateGameResponse() {
        return result.getMatchCreateGameResponse();
      }
      public Builder setMatchCreateGameResponse(com.randioo.box.protocol.Match.MatchCreateGameResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchCreateGameResponse = true;
        result.matchCreateGameResponse_ = value;
        return this;
      }
      public Builder setMatchCreateGameResponse(com.randioo.box.protocol.Match.MatchCreateGameResponse.Builder builderForValue) {
        result.hasMatchCreateGameResponse = true;
        result.matchCreateGameResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchCreateGameResponse(com.randioo.box.protocol.Match.MatchCreateGameResponse value) {
        if (result.hasMatchCreateGameResponse() &&
            result.matchCreateGameResponse_ != com.randioo.box.protocol.Match.MatchCreateGameResponse.getDefaultInstance()) {
          result.matchCreateGameResponse_ =
            com.randioo.box.protocol.Match.MatchCreateGameResponse.newBuilder(result.matchCreateGameResponse_).mergeFrom(value).buildPartial();
        } else {
          result.matchCreateGameResponse_ = value;
        }
        result.hasMatchCreateGameResponse = true;
        return this;
      }
      public Builder clearMatchCreateGameResponse() {
        result.hasMatchCreateGameResponse = false;
        result.matchCreateGameResponse_ = com.randioo.box.protocol.Match.MatchCreateGameResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.MatchJoinGameResponse MatchJoinGameResponse = 10;
      public boolean hasMatchJoinGameResponse() {
        return result.hasMatchJoinGameResponse();
      }
      public com.randioo.box.protocol.Match.MatchJoinGameResponse getMatchJoinGameResponse() {
        return result.getMatchJoinGameResponse();
      }
      public Builder setMatchJoinGameResponse(com.randioo.box.protocol.Match.MatchJoinGameResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchJoinGameResponse = true;
        result.matchJoinGameResponse_ = value;
        return this;
      }
      public Builder setMatchJoinGameResponse(com.randioo.box.protocol.Match.MatchJoinGameResponse.Builder builderForValue) {
        result.hasMatchJoinGameResponse = true;
        result.matchJoinGameResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchJoinGameResponse(com.randioo.box.protocol.Match.MatchJoinGameResponse value) {
        if (result.hasMatchJoinGameResponse() &&
            result.matchJoinGameResponse_ != com.randioo.box.protocol.Match.MatchJoinGameResponse.getDefaultInstance()) {
          result.matchJoinGameResponse_ =
            com.randioo.box.protocol.Match.MatchJoinGameResponse.newBuilder(result.matchJoinGameResponse_).mergeFrom(value).buildPartial();
        } else {
          result.matchJoinGameResponse_ = value;
        }
        result.hasMatchJoinGameResponse = true;
        return this;
      }
      public Builder clearMatchJoinGameResponse() {
        result.hasMatchJoinGameResponse = false;
        result.matchJoinGameResponse_ = com.randioo.box.protocol.Match.MatchJoinGameResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCMatchJoinGame SCMatchJoinGame = 11;
      public boolean hasSCMatchJoinGame() {
        return result.hasSCMatchJoinGame();
      }
      public com.randioo.box.protocol.Match.SCMatchJoinGame getSCMatchJoinGame() {
        return result.getSCMatchJoinGame();
      }
      public Builder setSCMatchJoinGame(com.randioo.box.protocol.Match.SCMatchJoinGame value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCMatchJoinGame = true;
        result.sCMatchJoinGame_ = value;
        return this;
      }
      public Builder setSCMatchJoinGame(com.randioo.box.protocol.Match.SCMatchJoinGame.Builder builderForValue) {
        result.hasSCMatchJoinGame = true;
        result.sCMatchJoinGame_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCMatchJoinGame(com.randioo.box.protocol.Match.SCMatchJoinGame value) {
        if (result.hasSCMatchJoinGame() &&
            result.sCMatchJoinGame_ != com.randioo.box.protocol.Match.SCMatchJoinGame.getDefaultInstance()) {
          result.sCMatchJoinGame_ =
            com.randioo.box.protocol.Match.SCMatchJoinGame.newBuilder(result.sCMatchJoinGame_).mergeFrom(value).buildPartial();
        } else {
          result.sCMatchJoinGame_ = value;
        }
        result.hasSCMatchJoinGame = true;
        return this;
      }
      public Builder clearSCMatchJoinGame() {
        result.hasSCMatchJoinGame = false;
        result.sCMatchJoinGame_ = com.randioo.box.protocol.Match.SCMatchJoinGame.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCMatchMineInfo SCMatchMineInfo = 12;
      public boolean hasSCMatchMineInfo() {
        return result.hasSCMatchMineInfo();
      }
      public com.randioo.box.protocol.Match.SCMatchMineInfo getSCMatchMineInfo() {
        return result.getSCMatchMineInfo();
      }
      public Builder setSCMatchMineInfo(com.randioo.box.protocol.Match.SCMatchMineInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCMatchMineInfo = true;
        result.sCMatchMineInfo_ = value;
        return this;
      }
      public Builder setSCMatchMineInfo(com.randioo.box.protocol.Match.SCMatchMineInfo.Builder builderForValue) {
        result.hasSCMatchMineInfo = true;
        result.sCMatchMineInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCMatchMineInfo(com.randioo.box.protocol.Match.SCMatchMineInfo value) {
        if (result.hasSCMatchMineInfo() &&
            result.sCMatchMineInfo_ != com.randioo.box.protocol.Match.SCMatchMineInfo.getDefaultInstance()) {
          result.sCMatchMineInfo_ =
            com.randioo.box.protocol.Match.SCMatchMineInfo.newBuilder(result.sCMatchMineInfo_).mergeFrom(value).buildPartial();
        } else {
          result.sCMatchMineInfo_ = value;
        }
        result.hasSCMatchMineInfo = true;
        return this;
      }
      public Builder clearSCMatchMineInfo() {
        result.hasSCMatchMineInfo = false;
        result.sCMatchMineInfo_ = com.randioo.box.protocol.Match.SCMatchMineInfo.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCMatchCreateGame SCMatchCreateGame = 13;
      public boolean hasSCMatchCreateGame() {
        return result.hasSCMatchCreateGame();
      }
      public com.randioo.box.protocol.Match.SCMatchCreateGame getSCMatchCreateGame() {
        return result.getSCMatchCreateGame();
      }
      public Builder setSCMatchCreateGame(com.randioo.box.protocol.Match.SCMatchCreateGame value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCMatchCreateGame = true;
        result.sCMatchCreateGame_ = value;
        return this;
      }
      public Builder setSCMatchCreateGame(com.randioo.box.protocol.Match.SCMatchCreateGame.Builder builderForValue) {
        result.hasSCMatchCreateGame = true;
        result.sCMatchCreateGame_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCMatchCreateGame(com.randioo.box.protocol.Match.SCMatchCreateGame value) {
        if (result.hasSCMatchCreateGame() &&
            result.sCMatchCreateGame_ != com.randioo.box.protocol.Match.SCMatchCreateGame.getDefaultInstance()) {
          result.sCMatchCreateGame_ =
            com.randioo.box.protocol.Match.SCMatchCreateGame.newBuilder(result.sCMatchCreateGame_).mergeFrom(value).buildPartial();
        } else {
          result.sCMatchCreateGame_ = value;
        }
        result.hasSCMatchCreateGame = true;
        return this;
      }
      public Builder clearSCMatchCreateGame() {
        result.hasSCMatchCreateGame = false;
        result.sCMatchCreateGame_ = com.randioo.box.protocol.Match.SCMatchCreateGame.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightNoticeReady SCFightNoticeReady = 14;
      public boolean hasSCFightNoticeReady() {
        return result.hasSCFightNoticeReady();
      }
      public com.randioo.box.protocol.Fight.SCFightNoticeReady getSCFightNoticeReady() {
        return result.getSCFightNoticeReady();
      }
      public Builder setSCFightNoticeReady(com.randioo.box.protocol.Fight.SCFightNoticeReady value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightNoticeReady = true;
        result.sCFightNoticeReady_ = value;
        return this;
      }
      public Builder setSCFightNoticeReady(com.randioo.box.protocol.Fight.SCFightNoticeReady.Builder builderForValue) {
        result.hasSCFightNoticeReady = true;
        result.sCFightNoticeReady_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightNoticeReady(com.randioo.box.protocol.Fight.SCFightNoticeReady value) {
        if (result.hasSCFightNoticeReady() &&
            result.sCFightNoticeReady_ != com.randioo.box.protocol.Fight.SCFightNoticeReady.getDefaultInstance()) {
          result.sCFightNoticeReady_ =
            com.randioo.box.protocol.Fight.SCFightNoticeReady.newBuilder(result.sCFightNoticeReady_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightNoticeReady_ = value;
        }
        result.hasSCFightNoticeReady = true;
        return this;
      }
      public Builder clearSCFightNoticeReady() {
        result.hasSCFightNoticeReady = false;
        result.sCFightNoticeReady_ = com.randioo.box.protocol.Fight.SCFightNoticeReady.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightReadyResponse FightReadyResponse = 15;
      public boolean hasFightReadyResponse() {
        return result.hasFightReadyResponse();
      }
      public com.randioo.box.protocol.Fight.FightReadyResponse getFightReadyResponse() {
        return result.getFightReadyResponse();
      }
      public Builder setFightReadyResponse(com.randioo.box.protocol.Fight.FightReadyResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightReadyResponse = true;
        result.fightReadyResponse_ = value;
        return this;
      }
      public Builder setFightReadyResponse(com.randioo.box.protocol.Fight.FightReadyResponse.Builder builderForValue) {
        result.hasFightReadyResponse = true;
        result.fightReadyResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightReadyResponse(com.randioo.box.protocol.Fight.FightReadyResponse value) {
        if (result.hasFightReadyResponse() &&
            result.fightReadyResponse_ != com.randioo.box.protocol.Fight.FightReadyResponse.getDefaultInstance()) {
          result.fightReadyResponse_ =
            com.randioo.box.protocol.Fight.FightReadyResponse.newBuilder(result.fightReadyResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightReadyResponse_ = value;
        }
        result.hasFightReadyResponse = true;
        return this;
      }
      public Builder clearFightReadyResponse() {
        result.hasFightReadyResponse = false;
        result.fightReadyResponse_ = com.randioo.box.protocol.Fight.FightReadyResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightReady SCFightReady = 16;
      public boolean hasSCFightReady() {
        return result.hasSCFightReady();
      }
      public com.randioo.box.protocol.Fight.SCFightReady getSCFightReady() {
        return result.getSCFightReady();
      }
      public Builder setSCFightReady(com.randioo.box.protocol.Fight.SCFightReady value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightReady = true;
        result.sCFightReady_ = value;
        return this;
      }
      public Builder setSCFightReady(com.randioo.box.protocol.Fight.SCFightReady.Builder builderForValue) {
        result.hasSCFightReady = true;
        result.sCFightReady_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightReady(com.randioo.box.protocol.Fight.SCFightReady value) {
        if (result.hasSCFightReady() &&
            result.sCFightReady_ != com.randioo.box.protocol.Fight.SCFightReady.getDefaultInstance()) {
          result.sCFightReady_ =
            com.randioo.box.protocol.Fight.SCFightReady.newBuilder(result.sCFightReady_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightReady_ = value;
        }
        result.hasSCFightReady = true;
        return this;
      }
      public Builder clearSCFightReady() {
        result.hasSCFightReady = false;
        result.sCFightReady_ = com.randioo.box.protocol.Fight.SCFightReady.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightStart SCFightStart = 17;
      public boolean hasSCFightStart() {
        return result.hasSCFightStart();
      }
      public com.randioo.box.protocol.Fight.SCFightStart getSCFightStart() {
        return result.getSCFightStart();
      }
      public Builder setSCFightStart(com.randioo.box.protocol.Fight.SCFightStart value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightStart = true;
        result.sCFightStart_ = value;
        return this;
      }
      public Builder setSCFightStart(com.randioo.box.protocol.Fight.SCFightStart.Builder builderForValue) {
        result.hasSCFightStart = true;
        result.sCFightStart_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightStart(com.randioo.box.protocol.Fight.SCFightStart value) {
        if (result.hasSCFightStart() &&
            result.sCFightStart_ != com.randioo.box.protocol.Fight.SCFightStart.getDefaultInstance()) {
          result.sCFightStart_ =
            com.randioo.box.protocol.Fight.SCFightStart.newBuilder(result.sCFightStart_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightStart_ = value;
        }
        result.hasSCFightStart = true;
        return this;
      }
      public Builder clearSCFightStart() {
        result.hasSCFightStart = false;
        result.sCFightStart_ = com.randioo.box.protocol.Fight.SCFightStart.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightExitGameResponse FightExitGameResponse = 18;
      public boolean hasFightExitGameResponse() {
        return result.hasFightExitGameResponse();
      }
      public com.randioo.box.protocol.Fight.FightExitGameResponse getFightExitGameResponse() {
        return result.getFightExitGameResponse();
      }
      public Builder setFightExitGameResponse(com.randioo.box.protocol.Fight.FightExitGameResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightExitGameResponse = true;
        result.fightExitGameResponse_ = value;
        return this;
      }
      public Builder setFightExitGameResponse(com.randioo.box.protocol.Fight.FightExitGameResponse.Builder builderForValue) {
        result.hasFightExitGameResponse = true;
        result.fightExitGameResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightExitGameResponse(com.randioo.box.protocol.Fight.FightExitGameResponse value) {
        if (result.hasFightExitGameResponse() &&
            result.fightExitGameResponse_ != com.randioo.box.protocol.Fight.FightExitGameResponse.getDefaultInstance()) {
          result.fightExitGameResponse_ =
            com.randioo.box.protocol.Fight.FightExitGameResponse.newBuilder(result.fightExitGameResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightExitGameResponse_ = value;
        }
        result.hasFightExitGameResponse = true;
        return this;
      }
      public Builder clearFightExitGameResponse() {
        result.hasFightExitGameResponse = false;
        result.fightExitGameResponse_ = com.randioo.box.protocol.Fight.FightExitGameResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightExitGame SCFightExitGame = 19;
      public boolean hasSCFightExitGame() {
        return result.hasSCFightExitGame();
      }
      public com.randioo.box.protocol.Fight.SCFightExitGame getSCFightExitGame() {
        return result.getSCFightExitGame();
      }
      public Builder setSCFightExitGame(com.randioo.box.protocol.Fight.SCFightExitGame value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightExitGame = true;
        result.sCFightExitGame_ = value;
        return this;
      }
      public Builder setSCFightExitGame(com.randioo.box.protocol.Fight.SCFightExitGame.Builder builderForValue) {
        result.hasSCFightExitGame = true;
        result.sCFightExitGame_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightExitGame(com.randioo.box.protocol.Fight.SCFightExitGame value) {
        if (result.hasSCFightExitGame() &&
            result.sCFightExitGame_ != com.randioo.box.protocol.Fight.SCFightExitGame.getDefaultInstance()) {
          result.sCFightExitGame_ =
            com.randioo.box.protocol.Fight.SCFightExitGame.newBuilder(result.sCFightExitGame_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightExitGame_ = value;
        }
        result.hasSCFightExitGame = true;
        return this;
      }
      public Builder clearSCFightExitGame() {
        result.hasSCFightExitGame = false;
        result.sCFightExitGame_ = com.randioo.box.protocol.Fight.SCFightExitGame.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightApplyExitGameResponse FightApplyExitGameResponse = 20;
      public boolean hasFightApplyExitGameResponse() {
        return result.hasFightApplyExitGameResponse();
      }
      public com.randioo.box.protocol.Fight.FightApplyExitGameResponse getFightApplyExitGameResponse() {
        return result.getFightApplyExitGameResponse();
      }
      public Builder setFightApplyExitGameResponse(com.randioo.box.protocol.Fight.FightApplyExitGameResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightApplyExitGameResponse = true;
        result.fightApplyExitGameResponse_ = value;
        return this;
      }
      public Builder setFightApplyExitGameResponse(com.randioo.box.protocol.Fight.FightApplyExitGameResponse.Builder builderForValue) {
        result.hasFightApplyExitGameResponse = true;
        result.fightApplyExitGameResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightApplyExitGameResponse(com.randioo.box.protocol.Fight.FightApplyExitGameResponse value) {
        if (result.hasFightApplyExitGameResponse() &&
            result.fightApplyExitGameResponse_ != com.randioo.box.protocol.Fight.FightApplyExitGameResponse.getDefaultInstance()) {
          result.fightApplyExitGameResponse_ =
            com.randioo.box.protocol.Fight.FightApplyExitGameResponse.newBuilder(result.fightApplyExitGameResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightApplyExitGameResponse_ = value;
        }
        result.hasFightApplyExitGameResponse = true;
        return this;
      }
      public Builder clearFightApplyExitGameResponse() {
        result.hasFightApplyExitGameResponse = false;
        result.fightApplyExitGameResponse_ = com.randioo.box.protocol.Fight.FightApplyExitGameResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightApplyExitGame SCFightApplyExitGame = 21;
      public boolean hasSCFightApplyExitGame() {
        return result.hasSCFightApplyExitGame();
      }
      public com.randioo.box.protocol.Fight.SCFightApplyExitGame getSCFightApplyExitGame() {
        return result.getSCFightApplyExitGame();
      }
      public Builder setSCFightApplyExitGame(com.randioo.box.protocol.Fight.SCFightApplyExitGame value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightApplyExitGame = true;
        result.sCFightApplyExitGame_ = value;
        return this;
      }
      public Builder setSCFightApplyExitGame(com.randioo.box.protocol.Fight.SCFightApplyExitGame.Builder builderForValue) {
        result.hasSCFightApplyExitGame = true;
        result.sCFightApplyExitGame_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightApplyExitGame(com.randioo.box.protocol.Fight.SCFightApplyExitGame value) {
        if (result.hasSCFightApplyExitGame() &&
            result.sCFightApplyExitGame_ != com.randioo.box.protocol.Fight.SCFightApplyExitGame.getDefaultInstance()) {
          result.sCFightApplyExitGame_ =
            com.randioo.box.protocol.Fight.SCFightApplyExitGame.newBuilder(result.sCFightApplyExitGame_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightApplyExitGame_ = value;
        }
        result.hasSCFightApplyExitGame = true;
        return this;
      }
      public Builder clearSCFightApplyExitGame() {
        result.hasSCFightApplyExitGame = false;
        result.sCFightApplyExitGame_ = com.randioo.box.protocol.Fight.SCFightApplyExitGame.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightAgreeExitGameResponse FightAgreeExitGameResponse = 22;
      public boolean hasFightAgreeExitGameResponse() {
        return result.hasFightAgreeExitGameResponse();
      }
      public com.randioo.box.protocol.Fight.FightAgreeExitGameResponse getFightAgreeExitGameResponse() {
        return result.getFightAgreeExitGameResponse();
      }
      public Builder setFightAgreeExitGameResponse(com.randioo.box.protocol.Fight.FightAgreeExitGameResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightAgreeExitGameResponse = true;
        result.fightAgreeExitGameResponse_ = value;
        return this;
      }
      public Builder setFightAgreeExitGameResponse(com.randioo.box.protocol.Fight.FightAgreeExitGameResponse.Builder builderForValue) {
        result.hasFightAgreeExitGameResponse = true;
        result.fightAgreeExitGameResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightAgreeExitGameResponse(com.randioo.box.protocol.Fight.FightAgreeExitGameResponse value) {
        if (result.hasFightAgreeExitGameResponse() &&
            result.fightAgreeExitGameResponse_ != com.randioo.box.protocol.Fight.FightAgreeExitGameResponse.getDefaultInstance()) {
          result.fightAgreeExitGameResponse_ =
            com.randioo.box.protocol.Fight.FightAgreeExitGameResponse.newBuilder(result.fightAgreeExitGameResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightAgreeExitGameResponse_ = value;
        }
        result.hasFightAgreeExitGameResponse = true;
        return this;
      }
      public Builder clearFightAgreeExitGameResponse() {
        result.hasFightAgreeExitGameResponse = false;
        result.fightAgreeExitGameResponse_ = com.randioo.box.protocol.Fight.FightAgreeExitGameResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightGameDismiss SCFightGameDismiss = 23;
      public boolean hasSCFightGameDismiss() {
        return result.hasSCFightGameDismiss();
      }
      public com.randioo.box.protocol.Fight.SCFightGameDismiss getSCFightGameDismiss() {
        return result.getSCFightGameDismiss();
      }
      public Builder setSCFightGameDismiss(com.randioo.box.protocol.Fight.SCFightGameDismiss value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightGameDismiss = true;
        result.sCFightGameDismiss_ = value;
        return this;
      }
      public Builder setSCFightGameDismiss(com.randioo.box.protocol.Fight.SCFightGameDismiss.Builder builderForValue) {
        result.hasSCFightGameDismiss = true;
        result.sCFightGameDismiss_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightGameDismiss(com.randioo.box.protocol.Fight.SCFightGameDismiss value) {
        if (result.hasSCFightGameDismiss() &&
            result.sCFightGameDismiss_ != com.randioo.box.protocol.Fight.SCFightGameDismiss.getDefaultInstance()) {
          result.sCFightGameDismiss_ =
            com.randioo.box.protocol.Fight.SCFightGameDismiss.newBuilder(result.sCFightGameDismiss_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightGameDismiss_ = value;
        }
        result.hasSCFightGameDismiss = true;
        return this;
      }
      public Builder clearSCFightGameDismiss() {
        result.hasSCFightGameDismiss = false;
        result.sCFightGameDismiss_ = com.randioo.box.protocol.Fight.SCFightGameDismiss.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightLoadResource SCFightLoadResource = 24;
      public boolean hasSCFightLoadResource() {
        return result.hasSCFightLoadResource();
      }
      public com.randioo.box.protocol.Fight.SCFightLoadResource getSCFightLoadResource() {
        return result.getSCFightLoadResource();
      }
      public Builder setSCFightLoadResource(com.randioo.box.protocol.Fight.SCFightLoadResource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightLoadResource = true;
        result.sCFightLoadResource_ = value;
        return this;
      }
      public Builder setSCFightLoadResource(com.randioo.box.protocol.Fight.SCFightLoadResource.Builder builderForValue) {
        result.hasSCFightLoadResource = true;
        result.sCFightLoadResource_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightLoadResource(com.randioo.box.protocol.Fight.SCFightLoadResource value) {
        if (result.hasSCFightLoadResource() &&
            result.sCFightLoadResource_ != com.randioo.box.protocol.Fight.SCFightLoadResource.getDefaultInstance()) {
          result.sCFightLoadResource_ =
            com.randioo.box.protocol.Fight.SCFightLoadResource.newBuilder(result.sCFightLoadResource_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightLoadResource_ = value;
        }
        result.hasSCFightLoadResource = true;
        return this;
      }
      public Builder clearSCFightLoadResource() {
        result.hasSCFightLoadResource = false;
        result.sCFightLoadResource_ = com.randioo.box.protocol.Fight.SCFightLoadResource.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightNoticeSendCard SCFightNoticeSendCard = 25;
      public boolean hasSCFightNoticeSendCard() {
        return result.hasSCFightNoticeSendCard();
      }
      public com.randioo.box.protocol.Fight.SCFightNoticeSendCard getSCFightNoticeSendCard() {
        return result.getSCFightNoticeSendCard();
      }
      public Builder setSCFightNoticeSendCard(com.randioo.box.protocol.Fight.SCFightNoticeSendCard value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightNoticeSendCard = true;
        result.sCFightNoticeSendCard_ = value;
        return this;
      }
      public Builder setSCFightNoticeSendCard(com.randioo.box.protocol.Fight.SCFightNoticeSendCard.Builder builderForValue) {
        result.hasSCFightNoticeSendCard = true;
        result.sCFightNoticeSendCard_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightNoticeSendCard(com.randioo.box.protocol.Fight.SCFightNoticeSendCard value) {
        if (result.hasSCFightNoticeSendCard() &&
            result.sCFightNoticeSendCard_ != com.randioo.box.protocol.Fight.SCFightNoticeSendCard.getDefaultInstance()) {
          result.sCFightNoticeSendCard_ =
            com.randioo.box.protocol.Fight.SCFightNoticeSendCard.newBuilder(result.sCFightNoticeSendCard_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightNoticeSendCard_ = value;
        }
        result.hasSCFightNoticeSendCard = true;
        return this;
      }
      public Builder clearSCFightNoticeSendCard() {
        result.hasSCFightNoticeSendCard = false;
        result.sCFightNoticeSendCard_ = com.randioo.box.protocol.Fight.SCFightNoticeSendCard.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightSendCardResponse FightSendCardResponse = 26;
      public boolean hasFightSendCardResponse() {
        return result.hasFightSendCardResponse();
      }
      public com.randioo.box.protocol.Fight.FightSendCardResponse getFightSendCardResponse() {
        return result.getFightSendCardResponse();
      }
      public Builder setFightSendCardResponse(com.randioo.box.protocol.Fight.FightSendCardResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightSendCardResponse = true;
        result.fightSendCardResponse_ = value;
        return this;
      }
      public Builder setFightSendCardResponse(com.randioo.box.protocol.Fight.FightSendCardResponse.Builder builderForValue) {
        result.hasFightSendCardResponse = true;
        result.fightSendCardResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightSendCardResponse(com.randioo.box.protocol.Fight.FightSendCardResponse value) {
        if (result.hasFightSendCardResponse() &&
            result.fightSendCardResponse_ != com.randioo.box.protocol.Fight.FightSendCardResponse.getDefaultInstance()) {
          result.fightSendCardResponse_ =
            com.randioo.box.protocol.Fight.FightSendCardResponse.newBuilder(result.fightSendCardResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightSendCardResponse_ = value;
        }
        result.hasFightSendCardResponse = true;
        return this;
      }
      public Builder clearFightSendCardResponse() {
        result.hasFightSendCardResponse = false;
        result.fightSendCardResponse_ = com.randioo.box.protocol.Fight.FightSendCardResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightSendCard SCFightSendCard = 27;
      public boolean hasSCFightSendCard() {
        return result.hasSCFightSendCard();
      }
      public com.randioo.box.protocol.Fight.SCFightSendCard getSCFightSendCard() {
        return result.getSCFightSendCard();
      }
      public Builder setSCFightSendCard(com.randioo.box.protocol.Fight.SCFightSendCard value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightSendCard = true;
        result.sCFightSendCard_ = value;
        return this;
      }
      public Builder setSCFightSendCard(com.randioo.box.protocol.Fight.SCFightSendCard.Builder builderForValue) {
        result.hasSCFightSendCard = true;
        result.sCFightSendCard_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightSendCard(com.randioo.box.protocol.Fight.SCFightSendCard value) {
        if (result.hasSCFightSendCard() &&
            result.sCFightSendCard_ != com.randioo.box.protocol.Fight.SCFightSendCard.getDefaultInstance()) {
          result.sCFightSendCard_ =
            com.randioo.box.protocol.Fight.SCFightSendCard.newBuilder(result.sCFightSendCard_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightSendCard_ = value;
        }
        result.hasSCFightSendCard = true;
        return this;
      }
      public Builder clearSCFightSendCard() {
        result.hasSCFightSendCard = false;
        result.sCFightSendCard_ = com.randioo.box.protocol.Fight.SCFightSendCard.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCAgreeExitGame SCAgreeExitGame = 28;
      public boolean hasSCAgreeExitGame() {
        return result.hasSCAgreeExitGame();
      }
      public com.randioo.box.protocol.Fight.SCAgreeExitGame getSCAgreeExitGame() {
        return result.getSCAgreeExitGame();
      }
      public Builder setSCAgreeExitGame(com.randioo.box.protocol.Fight.SCAgreeExitGame value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCAgreeExitGame = true;
        result.sCAgreeExitGame_ = value;
        return this;
      }
      public Builder setSCAgreeExitGame(com.randioo.box.protocol.Fight.SCAgreeExitGame.Builder builderForValue) {
        result.hasSCAgreeExitGame = true;
        result.sCAgreeExitGame_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCAgreeExitGame(com.randioo.box.protocol.Fight.SCAgreeExitGame value) {
        if (result.hasSCAgreeExitGame() &&
            result.sCAgreeExitGame_ != com.randioo.box.protocol.Fight.SCAgreeExitGame.getDefaultInstance()) {
          result.sCAgreeExitGame_ =
            com.randioo.box.protocol.Fight.SCAgreeExitGame.newBuilder(result.sCAgreeExitGame_).mergeFrom(value).buildPartial();
        } else {
          result.sCAgreeExitGame_ = value;
        }
        result.hasSCAgreeExitGame = true;
        return this;
      }
      public Builder clearSCAgreeExitGame() {
        result.hasSCAgreeExitGame = false;
        result.sCAgreeExitGame_ = com.randioo.box.protocol.Fight.SCAgreeExitGame.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightRoundOver SCFightRoundOver = 29;
      public boolean hasSCFightRoundOver() {
        return result.hasSCFightRoundOver();
      }
      public com.randioo.box.protocol.Fight.SCFightRoundOver getSCFightRoundOver() {
        return result.getSCFightRoundOver();
      }
      public Builder setSCFightRoundOver(com.randioo.box.protocol.Fight.SCFightRoundOver value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightRoundOver = true;
        result.sCFightRoundOver_ = value;
        return this;
      }
      public Builder setSCFightRoundOver(com.randioo.box.protocol.Fight.SCFightRoundOver.Builder builderForValue) {
        result.hasSCFightRoundOver = true;
        result.sCFightRoundOver_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightRoundOver(com.randioo.box.protocol.Fight.SCFightRoundOver value) {
        if (result.hasSCFightRoundOver() &&
            result.sCFightRoundOver_ != com.randioo.box.protocol.Fight.SCFightRoundOver.getDefaultInstance()) {
          result.sCFightRoundOver_ =
            com.randioo.box.protocol.Fight.SCFightRoundOver.newBuilder(result.sCFightRoundOver_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightRoundOver_ = value;
        }
        result.hasSCFightRoundOver = true;
        return this;
      }
      public Builder clearSCFightRoundOver() {
        result.hasSCFightRoundOver = false;
        result.sCFightRoundOver_ = com.randioo.box.protocol.Fight.SCFightRoundOver.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightRecommandResponse FightRecommandResponse = 30;
      public boolean hasFightRecommandResponse() {
        return result.hasFightRecommandResponse();
      }
      public com.randioo.box.protocol.Fight.FightRecommandResponse getFightRecommandResponse() {
        return result.getFightRecommandResponse();
      }
      public Builder setFightRecommandResponse(com.randioo.box.protocol.Fight.FightRecommandResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightRecommandResponse = true;
        result.fightRecommandResponse_ = value;
        return this;
      }
      public Builder setFightRecommandResponse(com.randioo.box.protocol.Fight.FightRecommandResponse.Builder builderForValue) {
        result.hasFightRecommandResponse = true;
        result.fightRecommandResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightRecommandResponse(com.randioo.box.protocol.Fight.FightRecommandResponse value) {
        if (result.hasFightRecommandResponse() &&
            result.fightRecommandResponse_ != com.randioo.box.protocol.Fight.FightRecommandResponse.getDefaultInstance()) {
          result.fightRecommandResponse_ =
            com.randioo.box.protocol.Fight.FightRecommandResponse.newBuilder(result.fightRecommandResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightRecommandResponse_ = value;
        }
        result.hasFightRecommandResponse = true;
        return this;
      }
      public Builder clearFightRecommandResponse() {
        result.hasFightRecommandResponse = false;
        result.fightRecommandResponse_ = com.randioo.box.protocol.Fight.FightRecommandResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightGameOver SCFightGameOver = 31;
      public boolean hasSCFightGameOver() {
        return result.hasSCFightGameOver();
      }
      public com.randioo.box.protocol.Fight.SCFightGameOver getSCFightGameOver() {
        return result.getSCFightGameOver();
      }
      public Builder setSCFightGameOver(com.randioo.box.protocol.Fight.SCFightGameOver value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightGameOver = true;
        result.sCFightGameOver_ = value;
        return this;
      }
      public Builder setSCFightGameOver(com.randioo.box.protocol.Fight.SCFightGameOver.Builder builderForValue) {
        result.hasSCFightGameOver = true;
        result.sCFightGameOver_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightGameOver(com.randioo.box.protocol.Fight.SCFightGameOver value) {
        if (result.hasSCFightGameOver() &&
            result.sCFightGameOver_ != com.randioo.box.protocol.Fight.SCFightGameOver.getDefaultInstance()) {
          result.sCFightGameOver_ =
            com.randioo.box.protocol.Fight.SCFightGameOver.newBuilder(result.sCFightGameOver_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightGameOver_ = value;
        }
        result.hasSCFightGameOver = true;
        return this;
      }
      public Builder clearSCFightGameOver() {
        result.hasSCFightGameOver = false;
        result.sCFightGameOver_ = com.randioo.box.protocol.Fight.SCFightGameOver.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightGetlastRoundResponse FightGetlastRoundResponse = 32;
      public boolean hasFightGetlastRoundResponse() {
        return result.hasFightGetlastRoundResponse();
      }
      public com.randioo.box.protocol.Fight.FightGetlastRoundResponse getFightGetlastRoundResponse() {
        return result.getFightGetlastRoundResponse();
      }
      public Builder setFightGetlastRoundResponse(com.randioo.box.protocol.Fight.FightGetlastRoundResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGetlastRoundResponse = true;
        result.fightGetlastRoundResponse_ = value;
        return this;
      }
      public Builder setFightGetlastRoundResponse(com.randioo.box.protocol.Fight.FightGetlastRoundResponse.Builder builderForValue) {
        result.hasFightGetlastRoundResponse = true;
        result.fightGetlastRoundResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGetlastRoundResponse(com.randioo.box.protocol.Fight.FightGetlastRoundResponse value) {
        if (result.hasFightGetlastRoundResponse() &&
            result.fightGetlastRoundResponse_ != com.randioo.box.protocol.Fight.FightGetlastRoundResponse.getDefaultInstance()) {
          result.fightGetlastRoundResponse_ =
            com.randioo.box.protocol.Fight.FightGetlastRoundResponse.newBuilder(result.fightGetlastRoundResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightGetlastRoundResponse_ = value;
        }
        result.hasFightGetlastRoundResponse = true;
        return this;
      }
      public Builder clearFightGetlastRoundResponse() {
        result.hasFightGetlastRoundResponse = false;
        result.fightGetlastRoundResponse_ = com.randioo.box.protocol.Fight.FightGetlastRoundResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightTouchCard SCFightTouchCard = 33;
      public boolean hasSCFightTouchCard() {
        return result.hasSCFightTouchCard();
      }
      public com.randioo.box.protocol.Fight.SCFightTouchCard getSCFightTouchCard() {
        return result.getSCFightTouchCard();
      }
      public Builder setSCFightTouchCard(com.randioo.box.protocol.Fight.SCFightTouchCard value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightTouchCard = true;
        result.sCFightTouchCard_ = value;
        return this;
      }
      public Builder setSCFightTouchCard(com.randioo.box.protocol.Fight.SCFightTouchCard.Builder builderForValue) {
        result.hasSCFightTouchCard = true;
        result.sCFightTouchCard_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightTouchCard(com.randioo.box.protocol.Fight.SCFightTouchCard value) {
        if (result.hasSCFightTouchCard() &&
            result.sCFightTouchCard_ != com.randioo.box.protocol.Fight.SCFightTouchCard.getDefaultInstance()) {
          result.sCFightTouchCard_ =
            com.randioo.box.protocol.Fight.SCFightTouchCard.newBuilder(result.sCFightTouchCard_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightTouchCard_ = value;
        }
        result.hasSCFightTouchCard = true;
        return this;
      }
      public Builder clearSCFightTouchCard() {
        result.hasSCFightTouchCard = false;
        result.sCFightTouchCard_ = com.randioo.box.protocol.Fight.SCFightTouchCard.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightNoticeChooseCardList SCFightNoticeChooseCardList = 34;
      public boolean hasSCFightNoticeChooseCardList() {
        return result.hasSCFightNoticeChooseCardList();
      }
      public com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList getSCFightNoticeChooseCardList() {
        return result.getSCFightNoticeChooseCardList();
      }
      public Builder setSCFightNoticeChooseCardList(com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightNoticeChooseCardList = true;
        result.sCFightNoticeChooseCardList_ = value;
        return this;
      }
      public Builder setSCFightNoticeChooseCardList(com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList.Builder builderForValue) {
        result.hasSCFightNoticeChooseCardList = true;
        result.sCFightNoticeChooseCardList_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightNoticeChooseCardList(com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList value) {
        if (result.hasSCFightNoticeChooseCardList() &&
            result.sCFightNoticeChooseCardList_ != com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList.getDefaultInstance()) {
          result.sCFightNoticeChooseCardList_ =
            com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList.newBuilder(result.sCFightNoticeChooseCardList_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightNoticeChooseCardList_ = value;
        }
        result.hasSCFightNoticeChooseCardList = true;
        return this;
      }
      public Builder clearSCFightNoticeChooseCardList() {
        result.hasSCFightNoticeChooseCardList = false;
        result.sCFightNoticeChooseCardList_ = com.randioo.box.protocol.Fight.SCFightNoticeChooseCardList.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightPengResponse FightPengResponse = 35;
      public boolean hasFightPengResponse() {
        return result.hasFightPengResponse();
      }
      public com.randioo.box.protocol.Fight.FightPengResponse getFightPengResponse() {
        return result.getFightPengResponse();
      }
      public Builder setFightPengResponse(com.randioo.box.protocol.Fight.FightPengResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightPengResponse = true;
        result.fightPengResponse_ = value;
        return this;
      }
      public Builder setFightPengResponse(com.randioo.box.protocol.Fight.FightPengResponse.Builder builderForValue) {
        result.hasFightPengResponse = true;
        result.fightPengResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightPengResponse(com.randioo.box.protocol.Fight.FightPengResponse value) {
        if (result.hasFightPengResponse() &&
            result.fightPengResponse_ != com.randioo.box.protocol.Fight.FightPengResponse.getDefaultInstance()) {
          result.fightPengResponse_ =
            com.randioo.box.protocol.Fight.FightPengResponse.newBuilder(result.fightPengResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightPengResponse_ = value;
        }
        result.hasFightPengResponse = true;
        return this;
      }
      public Builder clearFightPengResponse() {
        result.hasFightPengResponse = false;
        result.fightPengResponse_ = com.randioo.box.protocol.Fight.FightPengResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightGangResponse FightGangResponse = 36;
      public boolean hasFightGangResponse() {
        return result.hasFightGangResponse();
      }
      public com.randioo.box.protocol.Fight.FightGangResponse getFightGangResponse() {
        return result.getFightGangResponse();
      }
      public Builder setFightGangResponse(com.randioo.box.protocol.Fight.FightGangResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGangResponse = true;
        result.fightGangResponse_ = value;
        return this;
      }
      public Builder setFightGangResponse(com.randioo.box.protocol.Fight.FightGangResponse.Builder builderForValue) {
        result.hasFightGangResponse = true;
        result.fightGangResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGangResponse(com.randioo.box.protocol.Fight.FightGangResponse value) {
        if (result.hasFightGangResponse() &&
            result.fightGangResponse_ != com.randioo.box.protocol.Fight.FightGangResponse.getDefaultInstance()) {
          result.fightGangResponse_ =
            com.randioo.box.protocol.Fight.FightGangResponse.newBuilder(result.fightGangResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightGangResponse_ = value;
        }
        result.hasFightGangResponse = true;
        return this;
      }
      public Builder clearFightGangResponse() {
        result.hasFightGangResponse = false;
        result.fightGangResponse_ = com.randioo.box.protocol.Fight.FightGangResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightHuResponse FightHuResponse = 37;
      public boolean hasFightHuResponse() {
        return result.hasFightHuResponse();
      }
      public com.randioo.box.protocol.Fight.FightHuResponse getFightHuResponse() {
        return result.getFightHuResponse();
      }
      public Builder setFightHuResponse(com.randioo.box.protocol.Fight.FightHuResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightHuResponse = true;
        result.fightHuResponse_ = value;
        return this;
      }
      public Builder setFightHuResponse(com.randioo.box.protocol.Fight.FightHuResponse.Builder builderForValue) {
        result.hasFightHuResponse = true;
        result.fightHuResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightHuResponse(com.randioo.box.protocol.Fight.FightHuResponse value) {
        if (result.hasFightHuResponse() &&
            result.fightHuResponse_ != com.randioo.box.protocol.Fight.FightHuResponse.getDefaultInstance()) {
          result.fightHuResponse_ =
            com.randioo.box.protocol.Fight.FightHuResponse.newBuilder(result.fightHuResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightHuResponse_ = value;
        }
        result.hasFightHuResponse = true;
        return this;
      }
      public Builder clearFightHuResponse() {
        result.hasFightHuResponse = false;
        result.fightHuResponse_ = com.randioo.box.protocol.Fight.FightHuResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightHu SCFightHu = 38;
      public boolean hasSCFightHu() {
        return result.hasSCFightHu();
      }
      public com.randioo.box.protocol.Fight.SCFightHu getSCFightHu() {
        return result.getSCFightHu();
      }
      public Builder setSCFightHu(com.randioo.box.protocol.Fight.SCFightHu value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightHu = true;
        result.sCFightHu_ = value;
        return this;
      }
      public Builder setSCFightHu(com.randioo.box.protocol.Fight.SCFightHu.Builder builderForValue) {
        result.hasSCFightHu = true;
        result.sCFightHu_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightHu(com.randioo.box.protocol.Fight.SCFightHu value) {
        if (result.hasSCFightHu() &&
            result.sCFightHu_ != com.randioo.box.protocol.Fight.SCFightHu.getDefaultInstance()) {
          result.sCFightHu_ =
            com.randioo.box.protocol.Fight.SCFightHu.newBuilder(result.sCFightHu_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightHu_ = value;
        }
        result.hasSCFightHu = true;
        return this;
      }
      public Builder clearSCFightHu() {
        result.hasSCFightHu = false;
        result.sCFightHu_ = com.randioo.box.protocol.Fight.SCFightHu.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightGuoResponse FightGuoResponse = 39;
      public boolean hasFightGuoResponse() {
        return result.hasFightGuoResponse();
      }
      public com.randioo.box.protocol.Fight.FightGuoResponse getFightGuoResponse() {
        return result.getFightGuoResponse();
      }
      public Builder setFightGuoResponse(com.randioo.box.protocol.Fight.FightGuoResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGuoResponse = true;
        result.fightGuoResponse_ = value;
        return this;
      }
      public Builder setFightGuoResponse(com.randioo.box.protocol.Fight.FightGuoResponse.Builder builderForValue) {
        result.hasFightGuoResponse = true;
        result.fightGuoResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGuoResponse(com.randioo.box.protocol.Fight.FightGuoResponse value) {
        if (result.hasFightGuoResponse() &&
            result.fightGuoResponse_ != com.randioo.box.protocol.Fight.FightGuoResponse.getDefaultInstance()) {
          result.fightGuoResponse_ =
            com.randioo.box.protocol.Fight.FightGuoResponse.newBuilder(result.fightGuoResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightGuoResponse_ = value;
        }
        result.hasFightGuoResponse = true;
        return this;
      }
      public Builder clearFightGuoResponse() {
        result.hasFightGuoResponse = false;
        result.fightGuoResponse_ = com.randioo.box.protocol.Fight.FightGuoResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightGuo SCFightGuo = 40;
      public boolean hasSCFightGuo() {
        return result.hasSCFightGuo();
      }
      public com.randioo.box.protocol.Fight.SCFightGuo getSCFightGuo() {
        return result.getSCFightGuo();
      }
      public Builder setSCFightGuo(com.randioo.box.protocol.Fight.SCFightGuo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightGuo = true;
        result.sCFightGuo_ = value;
        return this;
      }
      public Builder setSCFightGuo(com.randioo.box.protocol.Fight.SCFightGuo.Builder builderForValue) {
        result.hasSCFightGuo = true;
        result.sCFightGuo_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightGuo(com.randioo.box.protocol.Fight.SCFightGuo value) {
        if (result.hasSCFightGuo() &&
            result.sCFightGuo_ != com.randioo.box.protocol.Fight.SCFightGuo.getDefaultInstance()) {
          result.sCFightGuo_ =
            com.randioo.box.protocol.Fight.SCFightGuo.newBuilder(result.sCFightGuo_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightGuo_ = value;
        }
        result.hasSCFightGuo = true;
        return this;
      }
      public Builder clearSCFightGuo() {
        result.hasSCFightGuo = false;
        result.sCFightGuo_ = com.randioo.box.protocol.Fight.SCFightGuo.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightCountdown SCFightCountdown = 41;
      public boolean hasSCFightCountdown() {
        return result.hasSCFightCountdown();
      }
      public com.randioo.box.protocol.Fight.SCFightCountdown getSCFightCountdown() {
        return result.getSCFightCountdown();
      }
      public Builder setSCFightCountdown(com.randioo.box.protocol.Fight.SCFightCountdown value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightCountdown = true;
        result.sCFightCountdown_ = value;
        return this;
      }
      public Builder setSCFightCountdown(com.randioo.box.protocol.Fight.SCFightCountdown.Builder builderForValue) {
        result.hasSCFightCountdown = true;
        result.sCFightCountdown_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightCountdown(com.randioo.box.protocol.Fight.SCFightCountdown value) {
        if (result.hasSCFightCountdown() &&
            result.sCFightCountdown_ != com.randioo.box.protocol.Fight.SCFightCountdown.getDefaultInstance()) {
          result.sCFightCountdown_ =
            com.randioo.box.protocol.Fight.SCFightCountdown.newBuilder(result.sCFightCountdown_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightCountdown_ = value;
        }
        result.hasSCFightCountdown = true;
        return this;
      }
      public Builder clearSCFightCountdown() {
        result.hasSCFightCountdown = false;
        result.sCFightCountdown_ = com.randioo.box.protocol.Fight.SCFightCountdown.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightCardList SCFightCardList = 42;
      public boolean hasSCFightCardList() {
        return result.hasSCFightCardList();
      }
      public com.randioo.box.protocol.Fight.SCFightCardList getSCFightCardList() {
        return result.getSCFightCardList();
      }
      public Builder setSCFightCardList(com.randioo.box.protocol.Fight.SCFightCardList value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightCardList = true;
        result.sCFightCardList_ = value;
        return this;
      }
      public Builder setSCFightCardList(com.randioo.box.protocol.Fight.SCFightCardList.Builder builderForValue) {
        result.hasSCFightCardList = true;
        result.sCFightCardList_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightCardList(com.randioo.box.protocol.Fight.SCFightCardList value) {
        if (result.hasSCFightCardList() &&
            result.sCFightCardList_ != com.randioo.box.protocol.Fight.SCFightCardList.getDefaultInstance()) {
          result.sCFightCardList_ =
            com.randioo.box.protocol.Fight.SCFightCardList.newBuilder(result.sCFightCardList_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightCardList_ = value;
        }
        result.hasSCFightCardList = true;
        return this;
      }
      public Builder clearSCFightCardList() {
        result.hasSCFightCardList = false;
        result.sCFightCardList_ = com.randioo.box.protocol.Fight.SCFightCardList.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightPointSeat SCFightPointSeat = 43;
      public boolean hasSCFightPointSeat() {
        return result.hasSCFightPointSeat();
      }
      public com.randioo.box.protocol.Fight.SCFightPointSeat getSCFightPointSeat() {
        return result.getSCFightPointSeat();
      }
      public Builder setSCFightPointSeat(com.randioo.box.protocol.Fight.SCFightPointSeat value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightPointSeat = true;
        result.sCFightPointSeat_ = value;
        return this;
      }
      public Builder setSCFightPointSeat(com.randioo.box.protocol.Fight.SCFightPointSeat.Builder builderForValue) {
        result.hasSCFightPointSeat = true;
        result.sCFightPointSeat_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightPointSeat(com.randioo.box.protocol.Fight.SCFightPointSeat value) {
        if (result.hasSCFightPointSeat() &&
            result.sCFightPointSeat_ != com.randioo.box.protocol.Fight.SCFightPointSeat.getDefaultInstance()) {
          result.sCFightPointSeat_ =
            com.randioo.box.protocol.Fight.SCFightPointSeat.newBuilder(result.sCFightPointSeat_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightPointSeat_ = value;
        }
        result.hasSCFightPointSeat = true;
        return this;
      }
      public Builder clearSCFightPointSeat() {
        result.hasSCFightPointSeat = false;
        result.sCFightPointSeat_ = com.randioo.box.protocol.Fight.SCFightPointSeat.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightApplyExitResult SCFightApplyExitResult = 44;
      public boolean hasSCFightApplyExitResult() {
        return result.hasSCFightApplyExitResult();
      }
      public com.randioo.box.protocol.Fight.SCFightApplyExitResult getSCFightApplyExitResult() {
        return result.getSCFightApplyExitResult();
      }
      public Builder setSCFightApplyExitResult(com.randioo.box.protocol.Fight.SCFightApplyExitResult value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightApplyExitResult = true;
        result.sCFightApplyExitResult_ = value;
        return this;
      }
      public Builder setSCFightApplyExitResult(com.randioo.box.protocol.Fight.SCFightApplyExitResult.Builder builderForValue) {
        result.hasSCFightApplyExitResult = true;
        result.sCFightApplyExitResult_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightApplyExitResult(com.randioo.box.protocol.Fight.SCFightApplyExitResult value) {
        if (result.hasSCFightApplyExitResult() &&
            result.sCFightApplyExitResult_ != com.randioo.box.protocol.Fight.SCFightApplyExitResult.getDefaultInstance()) {
          result.sCFightApplyExitResult_ =
            com.randioo.box.protocol.Fight.SCFightApplyExitResult.newBuilder(result.sCFightApplyExitResult_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightApplyExitResult_ = value;
        }
        result.hasSCFightApplyExitResult = true;
        return this;
      }
      public Builder clearSCFightApplyExitResult() {
        result.hasSCFightApplyExitResult = false;
        result.sCFightApplyExitResult_ = com.randioo.box.protocol.Fight.SCFightApplyExitResult.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCFightDisconnect SCFightDisconnect = 45;
      public boolean hasSCFightDisconnect() {
        return result.hasSCFightDisconnect();
      }
      public com.randioo.box.protocol.Fight.SCFightDisconnect getSCFightDisconnect() {
        return result.getSCFightDisconnect();
      }
      public Builder setSCFightDisconnect(com.randioo.box.protocol.Fight.SCFightDisconnect value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCFightDisconnect = true;
        result.sCFightDisconnect_ = value;
        return this;
      }
      public Builder setSCFightDisconnect(com.randioo.box.protocol.Fight.SCFightDisconnect.Builder builderForValue) {
        result.hasSCFightDisconnect = true;
        result.sCFightDisconnect_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCFightDisconnect(com.randioo.box.protocol.Fight.SCFightDisconnect value) {
        if (result.hasSCFightDisconnect() &&
            result.sCFightDisconnect_ != com.randioo.box.protocol.Fight.SCFightDisconnect.getDefaultInstance()) {
          result.sCFightDisconnect_ =
            com.randioo.box.protocol.Fight.SCFightDisconnect.newBuilder(result.sCFightDisconnect_).mergeFrom(value).buildPartial();
        } else {
          result.sCFightDisconnect_ = value;
        }
        result.hasSCFightDisconnect = true;
        return this;
      }
      public Builder clearSCFightDisconnect() {
        result.hasSCFightDisconnect = false;
        result.sCFightDisconnect_ = com.randioo.box.protocol.Fight.SCFightDisconnect.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightChiResponse FightChiResponse = 46;
      public boolean hasFightChiResponse() {
        return result.hasFightChiResponse();
      }
      public com.randioo.box.protocol.Fight.FightChiResponse getFightChiResponse() {
        return result.getFightChiResponse();
      }
      public Builder setFightChiResponse(com.randioo.box.protocol.Fight.FightChiResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightChiResponse = true;
        result.fightChiResponse_ = value;
        return this;
      }
      public Builder setFightChiResponse(com.randioo.box.protocol.Fight.FightChiResponse.Builder builderForValue) {
        result.hasFightChiResponse = true;
        result.fightChiResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightChiResponse(com.randioo.box.protocol.Fight.FightChiResponse value) {
        if (result.hasFightChiResponse() &&
            result.fightChiResponse_ != com.randioo.box.protocol.Fight.FightChiResponse.getDefaultInstance()) {
          result.fightChiResponse_ =
            com.randioo.box.protocol.Fight.FightChiResponse.newBuilder(result.fightChiResponse_).mergeFrom(value).buildPartial();
        } else {
          result.fightChiResponse_ = value;
        }
        result.hasFightChiResponse = true;
        return this;
      }
      public Builder clearFightChiResponse() {
        result.hasFightChiResponse = false;
        result.fightChiResponse_ = com.randioo.box.protocol.Fight.FightChiResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.MoneyExchangeResponse MoneyExchangeResponse = 47;
      public boolean hasMoneyExchangeResponse() {
        return result.hasMoneyExchangeResponse();
      }
      public com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse getMoneyExchangeResponse() {
        return result.getMoneyExchangeResponse();
      }
      public Builder setMoneyExchangeResponse(com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMoneyExchangeResponse = true;
        result.moneyExchangeResponse_ = value;
        return this;
      }
      public Builder setMoneyExchangeResponse(com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse.Builder builderForValue) {
        result.hasMoneyExchangeResponse = true;
        result.moneyExchangeResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeMoneyExchangeResponse(com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse value) {
        if (result.hasMoneyExchangeResponse() &&
            result.moneyExchangeResponse_ != com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse.getDefaultInstance()) {
          result.moneyExchangeResponse_ =
            com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse.newBuilder(result.moneyExchangeResponse_).mergeFrom(value).buildPartial();
        } else {
          result.moneyExchangeResponse_ = value;
        }
        result.hasMoneyExchangeResponse = true;
        return this;
      }
      public Builder clearMoneyExchangeResponse() {
        result.hasMoneyExchangeResponse = false;
        result.moneyExchangeResponse_ = com.randioo.box.protocol.MoneyExchange.MoneyExchangeResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SettingsResponse SettingsResponse = 48;
      public boolean hasSettingsResponse() {
        return result.hasSettingsResponse();
      }
      public com.randioo.box.protocol.Settings.SettingsResponse getSettingsResponse() {
        return result.getSettingsResponse();
      }
      public Builder setSettingsResponse(com.randioo.box.protocol.Settings.SettingsResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSettingsResponse = true;
        result.settingsResponse_ = value;
        return this;
      }
      public Builder setSettingsResponse(com.randioo.box.protocol.Settings.SettingsResponse.Builder builderForValue) {
        result.hasSettingsResponse = true;
        result.settingsResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeSettingsResponse(com.randioo.box.protocol.Settings.SettingsResponse value) {
        if (result.hasSettingsResponse() &&
            result.settingsResponse_ != com.randioo.box.protocol.Settings.SettingsResponse.getDefaultInstance()) {
          result.settingsResponse_ =
            com.randioo.box.protocol.Settings.SettingsResponse.newBuilder(result.settingsResponse_).mergeFrom(value).buildPartial();
        } else {
          result.settingsResponse_ = value;
        }
        result.hasSettingsResponse = true;
        return this;
      }
      public Builder clearSettingsResponse() {
        result.hasSettingsResponse = false;
        result.settingsResponse_ = com.randioo.box.protocol.Settings.SettingsResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SettingsShowResponse SettingsShowResponse = 49;
      public boolean hasSettingsShowResponse() {
        return result.hasSettingsShowResponse();
      }
      public com.randioo.box.protocol.Settings.SettingsShowResponse getSettingsShowResponse() {
        return result.getSettingsShowResponse();
      }
      public Builder setSettingsShowResponse(com.randioo.box.protocol.Settings.SettingsShowResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSettingsShowResponse = true;
        result.settingsShowResponse_ = value;
        return this;
      }
      public Builder setSettingsShowResponse(com.randioo.box.protocol.Settings.SettingsShowResponse.Builder builderForValue) {
        result.hasSettingsShowResponse = true;
        result.settingsShowResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeSettingsShowResponse(com.randioo.box.protocol.Settings.SettingsShowResponse value) {
        if (result.hasSettingsShowResponse() &&
            result.settingsShowResponse_ != com.randioo.box.protocol.Settings.SettingsShowResponse.getDefaultInstance()) {
          result.settingsShowResponse_ =
            com.randioo.box.protocol.Settings.SettingsShowResponse.newBuilder(result.settingsShowResponse_).mergeFrom(value).buildPartial();
        } else {
          result.settingsShowResponse_ = value;
        }
        result.hasSettingsShowResponse = true;
        return this;
      }
      public Builder clearSettingsShowResponse() {
        result.hasSettingsShowResponse = false;
        result.settingsShowResponse_ = com.randioo.box.protocol.Settings.SettingsShowResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RaceJoinRaceResponse RaceJoinRaceResponse = 50;
      public boolean hasRaceJoinRaceResponse() {
        return result.hasRaceJoinRaceResponse();
      }
      public com.randioo.box.protocol.Race.RaceJoinRaceResponse getRaceJoinRaceResponse() {
        return result.getRaceJoinRaceResponse();
      }
      public Builder setRaceJoinRaceResponse(com.randioo.box.protocol.Race.RaceJoinRaceResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRaceJoinRaceResponse = true;
        result.raceJoinRaceResponse_ = value;
        return this;
      }
      public Builder setRaceJoinRaceResponse(com.randioo.box.protocol.Race.RaceJoinRaceResponse.Builder builderForValue) {
        result.hasRaceJoinRaceResponse = true;
        result.raceJoinRaceResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeRaceJoinRaceResponse(com.randioo.box.protocol.Race.RaceJoinRaceResponse value) {
        if (result.hasRaceJoinRaceResponse() &&
            result.raceJoinRaceResponse_ != com.randioo.box.protocol.Race.RaceJoinRaceResponse.getDefaultInstance()) {
          result.raceJoinRaceResponse_ =
            com.randioo.box.protocol.Race.RaceJoinRaceResponse.newBuilder(result.raceJoinRaceResponse_).mergeFrom(value).buildPartial();
        } else {
          result.raceJoinRaceResponse_ = value;
        }
        result.hasRaceJoinRaceResponse = true;
        return this;
      }
      public Builder clearRaceJoinRaceResponse() {
        result.hasRaceJoinRaceResponse = false;
        result.raceJoinRaceResponse_ = com.randioo.box.protocol.Race.RaceJoinRaceResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCRaceJoinRace SCRaceJoinRace = 51;
      public boolean hasSCRaceJoinRace() {
        return result.hasSCRaceJoinRace();
      }
      public com.randioo.box.protocol.Race.SCRaceJoinRace getSCRaceJoinRace() {
        return result.getSCRaceJoinRace();
      }
      public Builder setSCRaceJoinRace(com.randioo.box.protocol.Race.SCRaceJoinRace value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCRaceJoinRace = true;
        result.sCRaceJoinRace_ = value;
        return this;
      }
      public Builder setSCRaceJoinRace(com.randioo.box.protocol.Race.SCRaceJoinRace.Builder builderForValue) {
        result.hasSCRaceJoinRace = true;
        result.sCRaceJoinRace_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCRaceJoinRace(com.randioo.box.protocol.Race.SCRaceJoinRace value) {
        if (result.hasSCRaceJoinRace() &&
            result.sCRaceJoinRace_ != com.randioo.box.protocol.Race.SCRaceJoinRace.getDefaultInstance()) {
          result.sCRaceJoinRace_ =
            com.randioo.box.protocol.Race.SCRaceJoinRace.newBuilder(result.sCRaceJoinRace_).mergeFrom(value).buildPartial();
        } else {
          result.sCRaceJoinRace_ = value;
        }
        result.hasSCRaceJoinRace = true;
        return this;
      }
      public Builder clearSCRaceJoinRace() {
        result.hasSCRaceJoinRace = false;
        result.sCRaceJoinRace_ = com.randioo.box.protocol.Race.SCRaceJoinRace.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RaceShowQueueResponse RaceShowQueueResponse = 52;
      public boolean hasRaceShowQueueResponse() {
        return result.hasRaceShowQueueResponse();
      }
      public com.randioo.box.protocol.Race.RaceShowQueueResponse getRaceShowQueueResponse() {
        return result.getRaceShowQueueResponse();
      }
      public Builder setRaceShowQueueResponse(com.randioo.box.protocol.Race.RaceShowQueueResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRaceShowQueueResponse = true;
        result.raceShowQueueResponse_ = value;
        return this;
      }
      public Builder setRaceShowQueueResponse(com.randioo.box.protocol.Race.RaceShowQueueResponse.Builder builderForValue) {
        result.hasRaceShowQueueResponse = true;
        result.raceShowQueueResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeRaceShowQueueResponse(com.randioo.box.protocol.Race.RaceShowQueueResponse value) {
        if (result.hasRaceShowQueueResponse() &&
            result.raceShowQueueResponse_ != com.randioo.box.protocol.Race.RaceShowQueueResponse.getDefaultInstance()) {
          result.raceShowQueueResponse_ =
            com.randioo.box.protocol.Race.RaceShowQueueResponse.newBuilder(result.raceShowQueueResponse_).mergeFrom(value).buildPartial();
        } else {
          result.raceShowQueueResponse_ = value;
        }
        result.hasRaceShowQueueResponse = true;
        return this;
      }
      public Builder clearRaceShowQueueResponse() {
        result.hasRaceShowQueueResponse = false;
        result.raceShowQueueResponse_ = com.randioo.box.protocol.Race.RaceShowQueueResponse.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SCRaceQueueChange SCRaceQueueChange = 53;
      public boolean hasSCRaceQueueChange() {
        return result.hasSCRaceQueueChange();
      }
      public com.randioo.box.protocol.Race.SCRaceQueueChange getSCRaceQueueChange() {
        return result.getSCRaceQueueChange();
      }
      public Builder setSCRaceQueueChange(com.randioo.box.protocol.Race.SCRaceQueueChange value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSCRaceQueueChange = true;
        result.sCRaceQueueChange_ = value;
        return this;
      }
      public Builder setSCRaceQueueChange(com.randioo.box.protocol.Race.SCRaceQueueChange.Builder builderForValue) {
        result.hasSCRaceQueueChange = true;
        result.sCRaceQueueChange_ = builderForValue.build();
        return this;
      }
      public Builder mergeSCRaceQueueChange(com.randioo.box.protocol.Race.SCRaceQueueChange value) {
        if (result.hasSCRaceQueueChange() &&
            result.sCRaceQueueChange_ != com.randioo.box.protocol.Race.SCRaceQueueChange.getDefaultInstance()) {
          result.sCRaceQueueChange_ =
            com.randioo.box.protocol.Race.SCRaceQueueChange.newBuilder(result.sCRaceQueueChange_).mergeFrom(value).buildPartial();
        } else {
          result.sCRaceQueueChange_ = value;
        }
        result.hasSCRaceQueueChange = true;
        return this;
      }
      public Builder clearSCRaceQueueChange() {
        result.hasSCRaceQueueChange = false;
        result.sCRaceQueueChange_ = com.randioo.box.protocol.Race.SCRaceQueueChange.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.MatchCheckRoomResponse MatchCheckRoomResponse = 54;
      public boolean hasMatchCheckRoomResponse() {
        return result.hasMatchCheckRoomResponse();
      }
      public com.randioo.box.protocol.Match.MatchCheckRoomResponse getMatchCheckRoomResponse() {
        return result.getMatchCheckRoomResponse();
      }
      public Builder setMatchCheckRoomResponse(com.randioo.box.protocol.Match.MatchCheckRoomResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchCheckRoomResponse = true;
        result.matchCheckRoomResponse_ = value;
        return this;
      }
      public Builder setMatchCheckRoomResponse(com.randioo.box.protocol.Match.MatchCheckRoomResponse.Builder builderForValue) {
        result.hasMatchCheckRoomResponse = true;
        result.matchCheckRoomResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchCheckRoomResponse(com.randioo.box.protocol.Match.MatchCheckRoomResponse value) {
        if (result.hasMatchCheckRoomResponse() &&
            result.matchCheckRoomResponse_ != com.randioo.box.protocol.Match.MatchCheckRoomResponse.getDefaultInstance()) {
          result.matchCheckRoomResponse_ =
            com.randioo.box.protocol.Match.MatchCheckRoomResponse.newBuilder(result.matchCheckRoomResponse_).mergeFrom(value).buildPartial();
        } else {
          result.matchCheckRoomResponse_ = value;
        }
        result.hasMatchCheckRoomResponse = true;
        return this;
      }
      public Builder clearMatchCheckRoomResponse() {
        result.hasMatchCheckRoomResponse = false;
        result.matchCheckRoomResponse_ = com.randioo.box.protocol.Match.MatchCheckRoomResponse.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SC)
    }
    
    static {
      defaultInstance = new SC(true);
      com.randioo.box.protocol.ServerMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SC)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SC_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SC_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023ServerMessage.proto\022*com.randioo.mahjo" +
      "ng_public_server.protocol\032\013Login.proto\032\n" +
      "Role.proto\032\013Match.proto\032\013Fight.proto\032\023Mo" +
      "neyExchange.proto\032\016Settings.proto\032\nRace." +
      "proto\032\013Heart.proto\"\362&\n\002SC\022P\n\rHeartRespon" +
      "se\030\001 \001(\01329.com.randioo.mahjong_public_se" +
      "rver.protocol.HeartResponse\022D\n\007SCHeart\030\002" +
      " \001(\01323.com.randioo.mahjong_public_server" +
      ".protocol.SCHeart\022h\n\031LoginCheckAccountRe" +
      "sponse\030\003 \001(\0132E.com.randioo.mahjong_publi",
      "c_server.protocol.LoginCheckAccountRespo" +
      "nse\022d\n\027LoginCreateRoleResponse\030\004 \001(\0132C.c" +
      "om.randioo.mahjong_public_server.protoco" +
      "l.LoginCreateRoleResponse\022f\n\030LoginGetRol" +
      "eDataResponse\030\005 \001(\0132D.com.randioo.mahjon" +
      "g_public_server.protocol.LoginGetRoleDat" +
      "aResponse\022V\n\020SCLoginOtherSide\030\006 \001(\0132<.co" +
      "m.randioo.mahjong_public_server.protocol" +
      ".SCLoginOtherSide\022Z\n\022RoleRenameResponse\030" +
      "\007 \001(\0132>.com.randioo.mahjong_public_serve",
      "r.protocol.RoleRenameResponse\022d\n\027RoleGet" +
      "RoleDataResponse\030\010 \001(\0132C.com.randioo.mah" +
      "jong_public_server.protocol.RoleGetRoleD" +
      "ataResponse\022d\n\027MatchCreateGameResponse\030\t" +
      " \001(\0132C.com.randioo.mahjong_public_server" +
      ".protocol.MatchCreateGameResponse\022`\n\025Mat" +
      "chJoinGameResponse\030\n \001(\0132A.com.randioo.m" +
      "ahjong_public_server.protocol.MatchJoinG" +
      "ameResponse\022T\n\017SCMatchJoinGame\030\013 \001(\0132;.c" +
      "om.randioo.mahjong_public_server.protoco",
      "l.SCMatchJoinGame\022T\n\017SCMatchMineInfo\030\014 \001" +
      "(\0132;.com.randioo.mahjong_public_server.p" +
      "rotocol.SCMatchMineInfo\022X\n\021SCMatchCreate" +
      "Game\030\r \001(\0132=.com.randioo.mahjong_public_" +
      "server.protocol.SCMatchCreateGame\022Z\n\022SCF" +
      "ightNoticeReady\030\016 \001(\0132>.com.randioo.mahj" +
      "ong_public_server.protocol.SCFightNotice" +
      "Ready\022Z\n\022FightReadyResponse\030\017 \001(\0132>.com." +
      "randioo.mahjong_public_server.protocol.F" +
      "ightReadyResponse\022N\n\014SCFightReady\030\020 \001(\0132",
      "8.com.randioo.mahjong_public_server.prot" +
      "ocol.SCFightReady\022N\n\014SCFightStart\030\021 \001(\0132" +
      "8.com.randioo.mahjong_public_server.prot" +
      "ocol.SCFightStart\022`\n\025FightExitGameRespon" +
      "se\030\022 \001(\0132A.com.randioo.mahjong_public_se" +
      "rver.protocol.FightExitGameResponse\022T\n\017S" +
      "CFightExitGame\030\023 \001(\0132;.com.randioo.mahjo" +
      "ng_public_server.protocol.SCFightExitGam" +
      "e\022j\n\032FightApplyExitGameResponse\030\024 \001(\0132F." +
      "com.randioo.mahjong_public_server.protoc",
      "ol.FightApplyExitGameResponse\022^\n\024SCFight" +
      "ApplyExitGame\030\025 \001(\0132@.com.randioo.mahjon" +
      "g_public_server.protocol.SCFightApplyExi" +
      "tGame\022j\n\032FightAgreeExitGameResponse\030\026 \001(" +
      "\0132F.com.randioo.mahjong_public_server.pr" +
      "otocol.FightAgreeExitGameResponse\022Z\n\022SCF" +
      "ightGameDismiss\030\027 \001(\0132>.com.randioo.mahj" +
      "ong_public_server.protocol.SCFightGameDi" +
      "smiss\022\\\n\023SCFightLoadResource\030\030 \001(\0132?.com" +
      ".randioo.mahjong_public_server.protocol.",
      "SCFightLoadResource\022`\n\025SCFightNoticeSend" +
      "Card\030\031 \001(\0132A.com.randioo.mahjong_public_" +
      "server.protocol.SCFightNoticeSendCard\022`\n" +
      "\025FightSendCardResponse\030\032 \001(\0132A.com.randi" +
      "oo.mahjong_public_server.protocol.FightS" +
      "endCardResponse\022T\n\017SCFightSendCard\030\033 \001(\013" +
      "2;.com.randioo.mahjong_public_server.pro" +
      "tocol.SCFightSendCard\022T\n\017SCAgreeExitGame" +
      "\030\034 \001(\0132;.com.randioo.mahjong_public_serv" +
      "er.protocol.SCAgreeExitGame\022V\n\020SCFightRo",
      "undOver\030\035 \001(\0132<.com.randioo.mahjong_publ" +
      "ic_server.protocol.SCFightRoundOver\022b\n\026F" +
      "ightRecommandResponse\030\036 \001(\0132B.com.randio" +
      "o.mahjong_public_server.protocol.FightRe" +
      "commandResponse\022T\n\017SCFightGameOver\030\037 \001(\013" +
      "2;.com.randioo.mahjong_public_server.pro" +
      "tocol.SCFightGameOver\022h\n\031FightGetlastRou" +
      "ndResponse\030  \001(\0132E.com.randioo.mahjong_p" +
      "ublic_server.protocol.FightGetlastRoundR" +
      "esponse\022V\n\020SCFightTouchCard\030! \001(\0132<.com.",
      "randioo.mahjong_public_server.protocol.S" +
      "CFightTouchCard\022l\n\033SCFightNoticeChooseCa" +
      "rdList\030\" \001(\0132G.com.randioo.mahjong_publi" +
      "c_server.protocol.SCFightNoticeChooseCar" +
      "dList\022X\n\021FightPengResponse\030# \001(\0132=.com.r" +
      "andioo.mahjong_public_server.protocol.Fi" +
      "ghtPengResponse\022X\n\021FightGangResponse\030$ \001" +
      "(\0132=.com.randioo.mahjong_public_server.p" +
      "rotocol.FightGangResponse\022T\n\017FightHuResp" +
      "onse\030% \001(\0132;.com.randioo.mahjong_public_",
      "server.protocol.FightHuResponse\022H\n\tSCFig" +
      "htHu\030& \001(\01325.com.randioo.mahjong_public_" +
      "server.protocol.SCFightHu\022V\n\020FightGuoRes" +
      "ponse\030\' \001(\0132<.com.randioo.mahjong_public" +
      "_server.protocol.FightGuoResponse\022J\n\nSCF" +
      "ightGuo\030( \001(\01326.com.randioo.mahjong_publ" +
      "ic_server.protocol.SCFightGuo\022V\n\020SCFight" +
      "Countdown\030) \001(\0132<.com.randioo.mahjong_pu" +
      "blic_server.protocol.SCFightCountdown\022T\n" +
      "\017SCFightCardList\030* \001(\0132;.com.randioo.mah",
      "jong_public_server.protocol.SCFightCardL" +
      "ist\022V\n\020SCFightPointSeat\030+ \001(\0132<.com.rand" +
      "ioo.mahjong_public_server.protocol.SCFig" +
      "htPointSeat\022b\n\026SCFightApplyExitResult\030, " +
      "\001(\0132B.com.randioo.mahjong_public_server." +
      "protocol.SCFightApplyExitResult\022X\n\021SCFig" +
      "htDisconnect\030- \001(\0132=.com.randioo.mahjong" +
      "_public_server.protocol.SCFightDisconnec" +
      "t\022V\n\020FightChiResponse\030. \001(\0132<.com.randio" +
      "o.mahjong_public_server.protocol.FightCh",
      "iResponse\022`\n\025MoneyExchangeResponse\030/ \001(\013" +
      "2A.com.randioo.mahjong_public_server.pro" +
      "tocol.MoneyExchangeResponse\022V\n\020SettingsR" +
      "esponse\0300 \001(\0132<.com.randioo.mahjong_publ" +
      "ic_server.protocol.SettingsResponse\022^\n\024S" +
      "ettingsShowResponse\0301 \001(\0132@.com.randioo." +
      "mahjong_public_server.protocol.SettingsS" +
      "howResponse\022^\n\024RaceJoinRaceResponse\0302 \001(" +
      "\0132@.com.randioo.mahjong_public_server.pr" +
      "otocol.RaceJoinRaceResponse\022R\n\016SCRaceJoi",
      "nRace\0303 \001(\0132:.com.randioo.mahjong_public" +
      "_server.protocol.SCRaceJoinRace\022`\n\025RaceS" +
      "howQueueResponse\0304 \001(\0132A.com.randioo.mah" +
      "jong_public_server.protocol.RaceShowQueu" +
      "eResponse\022X\n\021SCRaceQueueChange\0305 \001(\0132=.c" +
      "om.randioo.mahjong_public_server.protoco" +
      "l.SCRaceQueueChange\022b\n\026MatchCheckRoomRes" +
      "ponse\0306 \001(\0132B.com.randioo.mahjong_public" +
      "_server.protocol.MatchCheckRoomResponse"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_randioo_mahjong_public_server_protocol_SC_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_randioo_mahjong_public_server_protocol_SC_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SC_descriptor,
              new java.lang.String[] { "HeartResponse", "SCHeart", "LoginCheckAccountResponse", "LoginCreateRoleResponse", "LoginGetRoleDataResponse", "SCLoginOtherSide", "RoleRenameResponse", "RoleGetRoleDataResponse", "MatchCreateGameResponse", "MatchJoinGameResponse", "SCMatchJoinGame", "SCMatchMineInfo", "SCMatchCreateGame", "SCFightNoticeReady", "FightReadyResponse", "SCFightReady", "SCFightStart", "FightExitGameResponse", "SCFightExitGame", "FightApplyExitGameResponse", "SCFightApplyExitGame", "FightAgreeExitGameResponse", "SCFightGameDismiss", "SCFightLoadResource", "SCFightNoticeSendCard", "FightSendCardResponse", "SCFightSendCard", "SCAgreeExitGame", "SCFightRoundOver", "FightRecommandResponse", "SCFightGameOver", "FightGetlastRoundResponse", "SCFightTouchCard", "SCFightNoticeChooseCardList", "FightPengResponse", "FightGangResponse", "FightHuResponse", "SCFightHu", "FightGuoResponse", "SCFightGuo", "SCFightCountdown", "SCFightCardList", "SCFightPointSeat", "SCFightApplyExitResult", "SCFightDisconnect", "FightChiResponse", "MoneyExchangeResponse", "SettingsResponse", "SettingsShowResponse", "RaceJoinRaceResponse", "SCRaceJoinRace", "RaceShowQueueResponse", "SCRaceQueueChange", "MatchCheckRoomResponse", },
              com.randioo.box.protocol.ServerMessage.SC.class,
              com.randioo.box.protocol.ServerMessage.SC.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.randioo.box.protocol.Login.getDescriptor(),
          com.randioo.box.protocol.Role.getDescriptor(),
          com.randioo.box.protocol.Match.getDescriptor(),
          com.randioo.box.protocol.Fight.getDescriptor(),
          com.randioo.box.protocol.MoneyExchange.getDescriptor(),
          com.randioo.box.protocol.Settings.getDescriptor(),
          com.randioo.box.protocol.Race.getDescriptor(),
          com.randioo.box.protocol.Heart.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMessage.proto

package com.randioo.box.protocol;

public final class ClientMessage {
  private ClientMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class CS extends
      com.google.protobuf.GeneratedMessage {
    // Use CS.newBuilder() to construct.
    private CS() {
      initFields();
    }
    private CS(boolean noInit) {}
    
    private static final CS defaultInstance;
    public static CS getDefaultInstance() {
      return defaultInstance;
    }
    
    public CS getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.box.protocol.ClientMessage.internal_static_com_randioo_mahjong_public_server_protocol_CS_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.box.protocol.ClientMessage.internal_static_com_randioo_mahjong_public_server_protocol_CS_fieldAccessorTable;
    }
    
    // optional .com.randioo.mahjong_public_server.protocol.HeartRequest HeartRequest = 1;
    public static final int HEARTREQUEST_FIELD_NUMBER = 1;
    private boolean hasHeartRequest;
    private com.randioo.box.protocol.Heart.HeartRequest heartRequest_;
    public boolean hasHeartRequest() { return hasHeartRequest; }
    public com.randioo.box.protocol.Heart.HeartRequest getHeartRequest() { return heartRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.LoginCheckAccountRequest LoginCheckAccountRequest = 2;
    public static final int LOGINCHECKACCOUNTREQUEST_FIELD_NUMBER = 2;
    private boolean hasLoginCheckAccountRequest;
    private com.randioo.box.protocol.Login.LoginCheckAccountRequest loginCheckAccountRequest_;
    public boolean hasLoginCheckAccountRequest() { return hasLoginCheckAccountRequest; }
    public com.randioo.box.protocol.Login.LoginCheckAccountRequest getLoginCheckAccountRequest() { return loginCheckAccountRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.LoginCreateRoleRequest LoginCreateRoleRequest = 3;
    public static final int LOGINCREATEROLEREQUEST_FIELD_NUMBER = 3;
    private boolean hasLoginCreateRoleRequest;
    private com.randioo.box.protocol.Login.LoginCreateRoleRequest loginCreateRoleRequest_;
    public boolean hasLoginCreateRoleRequest() { return hasLoginCreateRoleRequest; }
    public com.randioo.box.protocol.Login.LoginCreateRoleRequest getLoginCreateRoleRequest() { return loginCreateRoleRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.LoginGetRoleDataRequest LoginGetRoleDataRequest = 4;
    public static final int LOGINGETROLEDATAREQUEST_FIELD_NUMBER = 4;
    private boolean hasLoginGetRoleDataRequest;
    private com.randioo.box.protocol.Login.LoginGetRoleDataRequest loginGetRoleDataRequest_;
    public boolean hasLoginGetRoleDataRequest() { return hasLoginGetRoleDataRequest; }
    public com.randioo.box.protocol.Login.LoginGetRoleDataRequest getLoginGetRoleDataRequest() { return loginGetRoleDataRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RoleRenameRequest RoleRenameRequest = 5;
    public static final int ROLERENAMEREQUEST_FIELD_NUMBER = 5;
    private boolean hasRoleRenameRequest;
    private com.randioo.box.protocol.Role.RoleRenameRequest roleRenameRequest_;
    public boolean hasRoleRenameRequest() { return hasRoleRenameRequest; }
    public com.randioo.box.protocol.Role.RoleRenameRequest getRoleRenameRequest() { return roleRenameRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RoleGetRoleDataRequest RoleGetRoleDataRequest = 6;
    public static final int ROLEGETROLEDATAREQUEST_FIELD_NUMBER = 6;
    private boolean hasRoleGetRoleDataRequest;
    private com.randioo.box.protocol.Role.RoleGetRoleDataRequest roleGetRoleDataRequest_;
    public boolean hasRoleGetRoleDataRequest() { return hasRoleGetRoleDataRequest; }
    public com.randioo.box.protocol.Role.RoleGetRoleDataRequest getRoleGetRoleDataRequest() { return roleGetRoleDataRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.MatchCreateGameRequest MatchCreateGameRequest = 7;
    public static final int MATCHCREATEGAMEREQUEST_FIELD_NUMBER = 7;
    private boolean hasMatchCreateGameRequest;
    private com.randioo.box.protocol.Match.MatchCreateGameRequest matchCreateGameRequest_;
    public boolean hasMatchCreateGameRequest() { return hasMatchCreateGameRequest; }
    public com.randioo.box.protocol.Match.MatchCreateGameRequest getMatchCreateGameRequest() { return matchCreateGameRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.MatchJoinGameRequest MatchJoinGameRequest = 8;
    public static final int MATCHJOINGAMEREQUEST_FIELD_NUMBER = 8;
    private boolean hasMatchJoinGameRequest;
    private com.randioo.box.protocol.Match.MatchJoinGameRequest matchJoinGameRequest_;
    public boolean hasMatchJoinGameRequest() { return hasMatchJoinGameRequest; }
    public com.randioo.box.protocol.Match.MatchJoinGameRequest getMatchJoinGameRequest() { return matchJoinGameRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.MatchCheckRoomRequest MatchCheckRoomRequest = 9;
    public static final int MATCHCHECKROOMREQUEST_FIELD_NUMBER = 9;
    private boolean hasMatchCheckRoomRequest;
    private com.randioo.box.protocol.Match.MatchCheckRoomRequest matchCheckRoomRequest_;
    public boolean hasMatchCheckRoomRequest() { return hasMatchCheckRoomRequest; }
    public com.randioo.box.protocol.Match.MatchCheckRoomRequest getMatchCheckRoomRequest() { return matchCheckRoomRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightReadyRequest FightReadyRequest = 10;
    public static final int FIGHTREADYREQUEST_FIELD_NUMBER = 10;
    private boolean hasFightReadyRequest;
    private com.randioo.box.protocol.Fight.FightReadyRequest fightReadyRequest_;
    public boolean hasFightReadyRequest() { return hasFightReadyRequest; }
    public com.randioo.box.protocol.Fight.FightReadyRequest getFightReadyRequest() { return fightReadyRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightExitGameRequest FightExitGameRequest = 11;
    public static final int FIGHTEXITGAMEREQUEST_FIELD_NUMBER = 11;
    private boolean hasFightExitGameRequest;
    private com.randioo.box.protocol.Fight.FightExitGameRequest fightExitGameRequest_;
    public boolean hasFightExitGameRequest() { return hasFightExitGameRequest; }
    public com.randioo.box.protocol.Fight.FightExitGameRequest getFightExitGameRequest() { return fightExitGameRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightApplyExitGameRequest FightApplyExitGameRequest = 12;
    public static final int FIGHTAPPLYEXITGAMEREQUEST_FIELD_NUMBER = 12;
    private boolean hasFightApplyExitGameRequest;
    private com.randioo.box.protocol.Fight.FightApplyExitGameRequest fightApplyExitGameRequest_;
    public boolean hasFightApplyExitGameRequest() { return hasFightApplyExitGameRequest; }
    public com.randioo.box.protocol.Fight.FightApplyExitGameRequest getFightApplyExitGameRequest() { return fightApplyExitGameRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightAgreeExitGameRequest FightAgreeExitGameRequest = 13;
    public static final int FIGHTAGREEEXITGAMEREQUEST_FIELD_NUMBER = 13;
    private boolean hasFightAgreeExitGameRequest;
    private com.randioo.box.protocol.Fight.FightAgreeExitGameRequest fightAgreeExitGameRequest_;
    public boolean hasFightAgreeExitGameRequest() { return hasFightAgreeExitGameRequest; }
    public com.randioo.box.protocol.Fight.FightAgreeExitGameRequest getFightAgreeExitGameRequest() { return fightAgreeExitGameRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightSendCardRequest FightSendCardRequest = 14;
    public static final int FIGHTSENDCARDREQUEST_FIELD_NUMBER = 14;
    private boolean hasFightSendCardRequest;
    private com.randioo.box.protocol.Fight.FightSendCardRequest fightSendCardRequest_;
    public boolean hasFightSendCardRequest() { return hasFightSendCardRequest; }
    public com.randioo.box.protocol.Fight.FightSendCardRequest getFightSendCardRequest() { return fightSendCardRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightRecommandRequest FightRecommandRequest = 15;
    public static final int FIGHTRECOMMANDREQUEST_FIELD_NUMBER = 15;
    private boolean hasFightRecommandRequest;
    private com.randioo.box.protocol.Fight.FightRecommandRequest fightRecommandRequest_;
    public boolean hasFightRecommandRequest() { return hasFightRecommandRequest; }
    public com.randioo.box.protocol.Fight.FightRecommandRequest getFightRecommandRequest() { return fightRecommandRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightGetlastRoundRequest FightGetlastRoundRequest = 16;
    public static final int FIGHTGETLASTROUNDREQUEST_FIELD_NUMBER = 16;
    private boolean hasFightGetlastRoundRequest;
    private com.randioo.box.protocol.Fight.FightGetlastRoundRequest fightGetlastRoundRequest_;
    public boolean hasFightGetlastRoundRequest() { return hasFightGetlastRoundRequest; }
    public com.randioo.box.protocol.Fight.FightGetlastRoundRequest getFightGetlastRoundRequest() { return fightGetlastRoundRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightPengRequest FightPengRequest = 17;
    public static final int FIGHTPENGREQUEST_FIELD_NUMBER = 17;
    private boolean hasFightPengRequest;
    private com.randioo.box.protocol.Fight.FightPengRequest fightPengRequest_;
    public boolean hasFightPengRequest() { return hasFightPengRequest; }
    public com.randioo.box.protocol.Fight.FightPengRequest getFightPengRequest() { return fightPengRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightGangRequest FightGangRequest = 18;
    public static final int FIGHTGANGREQUEST_FIELD_NUMBER = 18;
    private boolean hasFightGangRequest;
    private com.randioo.box.protocol.Fight.FightGangRequest fightGangRequest_;
    public boolean hasFightGangRequest() { return hasFightGangRequest; }
    public com.randioo.box.protocol.Fight.FightGangRequest getFightGangRequest() { return fightGangRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightHuRequest FightHuRequest = 19;
    public static final int FIGHTHUREQUEST_FIELD_NUMBER = 19;
    private boolean hasFightHuRequest;
    private com.randioo.box.protocol.Fight.FightHuRequest fightHuRequest_;
    public boolean hasFightHuRequest() { return hasFightHuRequest; }
    public com.randioo.box.protocol.Fight.FightHuRequest getFightHuRequest() { return fightHuRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightGuoRequest FightGuoRequest = 20;
    public static final int FIGHTGUOREQUEST_FIELD_NUMBER = 20;
    private boolean hasFightGuoRequest;
    private com.randioo.box.protocol.Fight.FightGuoRequest fightGuoRequest_;
    public boolean hasFightGuoRequest() { return hasFightGuoRequest; }
    public com.randioo.box.protocol.Fight.FightGuoRequest getFightGuoRequest() { return fightGuoRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightChiRequest FightChiRequest = 21;
    public static final int FIGHTCHIREQUEST_FIELD_NUMBER = 21;
    private boolean hasFightChiRequest;
    private com.randioo.box.protocol.Fight.FightChiRequest fightChiRequest_;
    public boolean hasFightChiRequest() { return hasFightChiRequest; }
    public com.randioo.box.protocol.Fight.FightChiRequest getFightChiRequest() { return fightChiRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.MoneyExchangeRequest MoneyExchangeRequest = 22;
    public static final int MONEYEXCHANGEREQUEST_FIELD_NUMBER = 22;
    private boolean hasMoneyExchangeRequest;
    private com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest moneyExchangeRequest_;
    public boolean hasMoneyExchangeRequest() { return hasMoneyExchangeRequest; }
    public com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest getMoneyExchangeRequest() { return moneyExchangeRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SettingsRequest SettingsRequest = 23;
    public static final int SETTINGSREQUEST_FIELD_NUMBER = 23;
    private boolean hasSettingsRequest;
    private com.randioo.box.protocol.Settings.SettingsRequest settingsRequest_;
    public boolean hasSettingsRequest() { return hasSettingsRequest; }
    public com.randioo.box.protocol.Settings.SettingsRequest getSettingsRequest() { return settingsRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.SettingsShowRequest SettingsShowRequest = 24;
    public static final int SETTINGSSHOWREQUEST_FIELD_NUMBER = 24;
    private boolean hasSettingsShowRequest;
    private com.randioo.box.protocol.Settings.SettingsShowRequest settingsShowRequest_;
    public boolean hasSettingsShowRequest() { return hasSettingsShowRequest; }
    public com.randioo.box.protocol.Settings.SettingsShowRequest getSettingsShowRequest() { return settingsShowRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RaceJoinRaceRequest RaceJoinRaceRequest = 25;
    public static final int RACEJOINRACEREQUEST_FIELD_NUMBER = 25;
    private boolean hasRaceJoinRaceRequest;
    private com.randioo.box.protocol.Race.RaceJoinRaceRequest raceJoinRaceRequest_;
    public boolean hasRaceJoinRaceRequest() { return hasRaceJoinRaceRequest; }
    public com.randioo.box.protocol.Race.RaceJoinRaceRequest getRaceJoinRaceRequest() { return raceJoinRaceRequest_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RaceShowQueueRequest RaceShowQueueRequest = 26;
    public static final int RACESHOWQUEUEREQUEST_FIELD_NUMBER = 26;
    private boolean hasRaceShowQueueRequest;
    private com.randioo.box.protocol.Race.RaceShowQueueRequest raceShowQueueRequest_;
    public boolean hasRaceShowQueueRequest() { return hasRaceShowQueueRequest; }
    public com.randioo.box.protocol.Race.RaceShowQueueRequest getRaceShowQueueRequest() { return raceShowQueueRequest_; }
    
    private void initFields() {
      heartRequest_ = com.randioo.box.protocol.Heart.HeartRequest.getDefaultInstance();
      loginCheckAccountRequest_ = com.randioo.box.protocol.Login.LoginCheckAccountRequest.getDefaultInstance();
      loginCreateRoleRequest_ = com.randioo.box.protocol.Login.LoginCreateRoleRequest.getDefaultInstance();
      loginGetRoleDataRequest_ = com.randioo.box.protocol.Login.LoginGetRoleDataRequest.getDefaultInstance();
      roleRenameRequest_ = com.randioo.box.protocol.Role.RoleRenameRequest.getDefaultInstance();
      roleGetRoleDataRequest_ = com.randioo.box.protocol.Role.RoleGetRoleDataRequest.getDefaultInstance();
      matchCreateGameRequest_ = com.randioo.box.protocol.Match.MatchCreateGameRequest.getDefaultInstance();
      matchJoinGameRequest_ = com.randioo.box.protocol.Match.MatchJoinGameRequest.getDefaultInstance();
      matchCheckRoomRequest_ = com.randioo.box.protocol.Match.MatchCheckRoomRequest.getDefaultInstance();
      fightReadyRequest_ = com.randioo.box.protocol.Fight.FightReadyRequest.getDefaultInstance();
      fightExitGameRequest_ = com.randioo.box.protocol.Fight.FightExitGameRequest.getDefaultInstance();
      fightApplyExitGameRequest_ = com.randioo.box.protocol.Fight.FightApplyExitGameRequest.getDefaultInstance();
      fightAgreeExitGameRequest_ = com.randioo.box.protocol.Fight.FightAgreeExitGameRequest.getDefaultInstance();
      fightSendCardRequest_ = com.randioo.box.protocol.Fight.FightSendCardRequest.getDefaultInstance();
      fightRecommandRequest_ = com.randioo.box.protocol.Fight.FightRecommandRequest.getDefaultInstance();
      fightGetlastRoundRequest_ = com.randioo.box.protocol.Fight.FightGetlastRoundRequest.getDefaultInstance();
      fightPengRequest_ = com.randioo.box.protocol.Fight.FightPengRequest.getDefaultInstance();
      fightGangRequest_ = com.randioo.box.protocol.Fight.FightGangRequest.getDefaultInstance();
      fightHuRequest_ = com.randioo.box.protocol.Fight.FightHuRequest.getDefaultInstance();
      fightGuoRequest_ = com.randioo.box.protocol.Fight.FightGuoRequest.getDefaultInstance();
      fightChiRequest_ = com.randioo.box.protocol.Fight.FightChiRequest.getDefaultInstance();
      moneyExchangeRequest_ = com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest.getDefaultInstance();
      settingsRequest_ = com.randioo.box.protocol.Settings.SettingsRequest.getDefaultInstance();
      settingsShowRequest_ = com.randioo.box.protocol.Settings.SettingsShowRequest.getDefaultInstance();
      raceJoinRaceRequest_ = com.randioo.box.protocol.Race.RaceJoinRaceRequest.getDefaultInstance();
      raceShowQueueRequest_ = com.randioo.box.protocol.Race.RaceShowQueueRequest.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasHeartRequest()) {
        output.writeMessage(1, getHeartRequest());
      }
      if (hasLoginCheckAccountRequest()) {
        output.writeMessage(2, getLoginCheckAccountRequest());
      }
      if (hasLoginCreateRoleRequest()) {
        output.writeMessage(3, getLoginCreateRoleRequest());
      }
      if (hasLoginGetRoleDataRequest()) {
        output.writeMessage(4, getLoginGetRoleDataRequest());
      }
      if (hasRoleRenameRequest()) {
        output.writeMessage(5, getRoleRenameRequest());
      }
      if (hasRoleGetRoleDataRequest()) {
        output.writeMessage(6, getRoleGetRoleDataRequest());
      }
      if (hasMatchCreateGameRequest()) {
        output.writeMessage(7, getMatchCreateGameRequest());
      }
      if (hasMatchJoinGameRequest()) {
        output.writeMessage(8, getMatchJoinGameRequest());
      }
      if (hasMatchCheckRoomRequest()) {
        output.writeMessage(9, getMatchCheckRoomRequest());
      }
      if (hasFightReadyRequest()) {
        output.writeMessage(10, getFightReadyRequest());
      }
      if (hasFightExitGameRequest()) {
        output.writeMessage(11, getFightExitGameRequest());
      }
      if (hasFightApplyExitGameRequest()) {
        output.writeMessage(12, getFightApplyExitGameRequest());
      }
      if (hasFightAgreeExitGameRequest()) {
        output.writeMessage(13, getFightAgreeExitGameRequest());
      }
      if (hasFightSendCardRequest()) {
        output.writeMessage(14, getFightSendCardRequest());
      }
      if (hasFightRecommandRequest()) {
        output.writeMessage(15, getFightRecommandRequest());
      }
      if (hasFightGetlastRoundRequest()) {
        output.writeMessage(16, getFightGetlastRoundRequest());
      }
      if (hasFightPengRequest()) {
        output.writeMessage(17, getFightPengRequest());
      }
      if (hasFightGangRequest()) {
        output.writeMessage(18, getFightGangRequest());
      }
      if (hasFightHuRequest()) {
        output.writeMessage(19, getFightHuRequest());
      }
      if (hasFightGuoRequest()) {
        output.writeMessage(20, getFightGuoRequest());
      }
      if (hasFightChiRequest()) {
        output.writeMessage(21, getFightChiRequest());
      }
      if (hasMoneyExchangeRequest()) {
        output.writeMessage(22, getMoneyExchangeRequest());
      }
      if (hasSettingsRequest()) {
        output.writeMessage(23, getSettingsRequest());
      }
      if (hasSettingsShowRequest()) {
        output.writeMessage(24, getSettingsShowRequest());
      }
      if (hasRaceJoinRaceRequest()) {
        output.writeMessage(25, getRaceJoinRaceRequest());
      }
      if (hasRaceShowQueueRequest()) {
        output.writeMessage(26, getRaceShowQueueRequest());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasHeartRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeartRequest());
      }
      if (hasLoginCheckAccountRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLoginCheckAccountRequest());
      }
      if (hasLoginCreateRoleRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLoginCreateRoleRequest());
      }
      if (hasLoginGetRoleDataRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getLoginGetRoleDataRequest());
      }
      if (hasRoleRenameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getRoleRenameRequest());
      }
      if (hasRoleGetRoleDataRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getRoleGetRoleDataRequest());
      }
      if (hasMatchCreateGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getMatchCreateGameRequest());
      }
      if (hasMatchJoinGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getMatchJoinGameRequest());
      }
      if (hasMatchCheckRoomRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getMatchCheckRoomRequest());
      }
      if (hasFightReadyRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getFightReadyRequest());
      }
      if (hasFightExitGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getFightExitGameRequest());
      }
      if (hasFightApplyExitGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getFightApplyExitGameRequest());
      }
      if (hasFightAgreeExitGameRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getFightAgreeExitGameRequest());
      }
      if (hasFightSendCardRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getFightSendCardRequest());
      }
      if (hasFightRecommandRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getFightRecommandRequest());
      }
      if (hasFightGetlastRoundRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getFightGetlastRoundRequest());
      }
      if (hasFightPengRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getFightPengRequest());
      }
      if (hasFightGangRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getFightGangRequest());
      }
      if (hasFightHuRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, getFightHuRequest());
      }
      if (hasFightGuoRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, getFightGuoRequest());
      }
      if (hasFightChiRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getFightChiRequest());
      }
      if (hasMoneyExchangeRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, getMoneyExchangeRequest());
      }
      if (hasSettingsRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, getSettingsRequest());
      }
      if (hasSettingsShowRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, getSettingsShowRequest());
      }
      if (hasRaceJoinRaceRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, getRaceJoinRaceRequest());
      }
      if (hasRaceShowQueueRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, getRaceShowQueueRequest());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.box.protocol.ClientMessage.CS parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.box.protocol.ClientMessage.CS parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.box.protocol.ClientMessage.CS parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.box.protocol.ClientMessage.CS parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.box.protocol.ClientMessage.CS parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.box.protocol.ClientMessage.CS parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.box.protocol.ClientMessage.CS parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.box.protocol.ClientMessage.CS parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.box.protocol.ClientMessage.CS parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.box.protocol.ClientMessage.CS parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.box.protocol.ClientMessage.CS prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.box.protocol.ClientMessage.CS result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.ClientMessage.CS.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.box.protocol.ClientMessage.CS();
        return builder;
      }
      
      protected com.randioo.box.protocol.ClientMessage.CS internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.box.protocol.ClientMessage.CS();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.box.protocol.ClientMessage.CS.getDescriptor();
      }
      
      public com.randioo.box.protocol.ClientMessage.CS getDefaultInstanceForType() {
        return com.randioo.box.protocol.ClientMessage.CS.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.box.protocol.ClientMessage.CS build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.box.protocol.ClientMessage.CS buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.box.protocol.ClientMessage.CS buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.box.protocol.ClientMessage.CS returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.box.protocol.ClientMessage.CS) {
          return mergeFrom((com.randioo.box.protocol.ClientMessage.CS)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.box.protocol.ClientMessage.CS other) {
        if (other == com.randioo.box.protocol.ClientMessage.CS.getDefaultInstance()) return this;
        if (other.hasHeartRequest()) {
          mergeHeartRequest(other.getHeartRequest());
        }
        if (other.hasLoginCheckAccountRequest()) {
          mergeLoginCheckAccountRequest(other.getLoginCheckAccountRequest());
        }
        if (other.hasLoginCreateRoleRequest()) {
          mergeLoginCreateRoleRequest(other.getLoginCreateRoleRequest());
        }
        if (other.hasLoginGetRoleDataRequest()) {
          mergeLoginGetRoleDataRequest(other.getLoginGetRoleDataRequest());
        }
        if (other.hasRoleRenameRequest()) {
          mergeRoleRenameRequest(other.getRoleRenameRequest());
        }
        if (other.hasRoleGetRoleDataRequest()) {
          mergeRoleGetRoleDataRequest(other.getRoleGetRoleDataRequest());
        }
        if (other.hasMatchCreateGameRequest()) {
          mergeMatchCreateGameRequest(other.getMatchCreateGameRequest());
        }
        if (other.hasMatchJoinGameRequest()) {
          mergeMatchJoinGameRequest(other.getMatchJoinGameRequest());
        }
        if (other.hasMatchCheckRoomRequest()) {
          mergeMatchCheckRoomRequest(other.getMatchCheckRoomRequest());
        }
        if (other.hasFightReadyRequest()) {
          mergeFightReadyRequest(other.getFightReadyRequest());
        }
        if (other.hasFightExitGameRequest()) {
          mergeFightExitGameRequest(other.getFightExitGameRequest());
        }
        if (other.hasFightApplyExitGameRequest()) {
          mergeFightApplyExitGameRequest(other.getFightApplyExitGameRequest());
        }
        if (other.hasFightAgreeExitGameRequest()) {
          mergeFightAgreeExitGameRequest(other.getFightAgreeExitGameRequest());
        }
        if (other.hasFightSendCardRequest()) {
          mergeFightSendCardRequest(other.getFightSendCardRequest());
        }
        if (other.hasFightRecommandRequest()) {
          mergeFightRecommandRequest(other.getFightRecommandRequest());
        }
        if (other.hasFightGetlastRoundRequest()) {
          mergeFightGetlastRoundRequest(other.getFightGetlastRoundRequest());
        }
        if (other.hasFightPengRequest()) {
          mergeFightPengRequest(other.getFightPengRequest());
        }
        if (other.hasFightGangRequest()) {
          mergeFightGangRequest(other.getFightGangRequest());
        }
        if (other.hasFightHuRequest()) {
          mergeFightHuRequest(other.getFightHuRequest());
        }
        if (other.hasFightGuoRequest()) {
          mergeFightGuoRequest(other.getFightGuoRequest());
        }
        if (other.hasFightChiRequest()) {
          mergeFightChiRequest(other.getFightChiRequest());
        }
        if (other.hasMoneyExchangeRequest()) {
          mergeMoneyExchangeRequest(other.getMoneyExchangeRequest());
        }
        if (other.hasSettingsRequest()) {
          mergeSettingsRequest(other.getSettingsRequest());
        }
        if (other.hasSettingsShowRequest()) {
          mergeSettingsShowRequest(other.getSettingsShowRequest());
        }
        if (other.hasRaceJoinRaceRequest()) {
          mergeRaceJoinRaceRequest(other.getRaceJoinRaceRequest());
        }
        if (other.hasRaceShowQueueRequest()) {
          mergeRaceShowQueueRequest(other.getRaceShowQueueRequest());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.box.protocol.Heart.HeartRequest.Builder subBuilder = com.randioo.box.protocol.Heart.HeartRequest.newBuilder();
              if (hasHeartRequest()) {
                subBuilder.mergeFrom(getHeartRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHeartRequest(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.randioo.box.protocol.Login.LoginCheckAccountRequest.Builder subBuilder = com.randioo.box.protocol.Login.LoginCheckAccountRequest.newBuilder();
              if (hasLoginCheckAccountRequest()) {
                subBuilder.mergeFrom(getLoginCheckAccountRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLoginCheckAccountRequest(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.randioo.box.protocol.Login.LoginCreateRoleRequest.Builder subBuilder = com.randioo.box.protocol.Login.LoginCreateRoleRequest.newBuilder();
              if (hasLoginCreateRoleRequest()) {
                subBuilder.mergeFrom(getLoginCreateRoleRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLoginCreateRoleRequest(subBuilder.buildPartial());
              break;
            }
            case 34: {
              com.randioo.box.protocol.Login.LoginGetRoleDataRequest.Builder subBuilder = com.randioo.box.protocol.Login.LoginGetRoleDataRequest.newBuilder();
              if (hasLoginGetRoleDataRequest()) {
                subBuilder.mergeFrom(getLoginGetRoleDataRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLoginGetRoleDataRequest(subBuilder.buildPartial());
              break;
            }
            case 42: {
              com.randioo.box.protocol.Role.RoleRenameRequest.Builder subBuilder = com.randioo.box.protocol.Role.RoleRenameRequest.newBuilder();
              if (hasRoleRenameRequest()) {
                subBuilder.mergeFrom(getRoleRenameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoleRenameRequest(subBuilder.buildPartial());
              break;
            }
            case 50: {
              com.randioo.box.protocol.Role.RoleGetRoleDataRequest.Builder subBuilder = com.randioo.box.protocol.Role.RoleGetRoleDataRequest.newBuilder();
              if (hasRoleGetRoleDataRequest()) {
                subBuilder.mergeFrom(getRoleGetRoleDataRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoleGetRoleDataRequest(subBuilder.buildPartial());
              break;
            }
            case 58: {
              com.randioo.box.protocol.Match.MatchCreateGameRequest.Builder subBuilder = com.randioo.box.protocol.Match.MatchCreateGameRequest.newBuilder();
              if (hasMatchCreateGameRequest()) {
                subBuilder.mergeFrom(getMatchCreateGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchCreateGameRequest(subBuilder.buildPartial());
              break;
            }
            case 66: {
              com.randioo.box.protocol.Match.MatchJoinGameRequest.Builder subBuilder = com.randioo.box.protocol.Match.MatchJoinGameRequest.newBuilder();
              if (hasMatchJoinGameRequest()) {
                subBuilder.mergeFrom(getMatchJoinGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchJoinGameRequest(subBuilder.buildPartial());
              break;
            }
            case 74: {
              com.randioo.box.protocol.Match.MatchCheckRoomRequest.Builder subBuilder = com.randioo.box.protocol.Match.MatchCheckRoomRequest.newBuilder();
              if (hasMatchCheckRoomRequest()) {
                subBuilder.mergeFrom(getMatchCheckRoomRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMatchCheckRoomRequest(subBuilder.buildPartial());
              break;
            }
            case 82: {
              com.randioo.box.protocol.Fight.FightReadyRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightReadyRequest.newBuilder();
              if (hasFightReadyRequest()) {
                subBuilder.mergeFrom(getFightReadyRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightReadyRequest(subBuilder.buildPartial());
              break;
            }
            case 90: {
              com.randioo.box.protocol.Fight.FightExitGameRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightExitGameRequest.newBuilder();
              if (hasFightExitGameRequest()) {
                subBuilder.mergeFrom(getFightExitGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightExitGameRequest(subBuilder.buildPartial());
              break;
            }
            case 98: {
              com.randioo.box.protocol.Fight.FightApplyExitGameRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightApplyExitGameRequest.newBuilder();
              if (hasFightApplyExitGameRequest()) {
                subBuilder.mergeFrom(getFightApplyExitGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightApplyExitGameRequest(subBuilder.buildPartial());
              break;
            }
            case 106: {
              com.randioo.box.protocol.Fight.FightAgreeExitGameRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightAgreeExitGameRequest.newBuilder();
              if (hasFightAgreeExitGameRequest()) {
                subBuilder.mergeFrom(getFightAgreeExitGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightAgreeExitGameRequest(subBuilder.buildPartial());
              break;
            }
            case 114: {
              com.randioo.box.protocol.Fight.FightSendCardRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightSendCardRequest.newBuilder();
              if (hasFightSendCardRequest()) {
                subBuilder.mergeFrom(getFightSendCardRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightSendCardRequest(subBuilder.buildPartial());
              break;
            }
            case 122: {
              com.randioo.box.protocol.Fight.FightRecommandRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightRecommandRequest.newBuilder();
              if (hasFightRecommandRequest()) {
                subBuilder.mergeFrom(getFightRecommandRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightRecommandRequest(subBuilder.buildPartial());
              break;
            }
            case 130: {
              com.randioo.box.protocol.Fight.FightGetlastRoundRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightGetlastRoundRequest.newBuilder();
              if (hasFightGetlastRoundRequest()) {
                subBuilder.mergeFrom(getFightGetlastRoundRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGetlastRoundRequest(subBuilder.buildPartial());
              break;
            }
            case 138: {
              com.randioo.box.protocol.Fight.FightPengRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightPengRequest.newBuilder();
              if (hasFightPengRequest()) {
                subBuilder.mergeFrom(getFightPengRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightPengRequest(subBuilder.buildPartial());
              break;
            }
            case 146: {
              com.randioo.box.protocol.Fight.FightGangRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightGangRequest.newBuilder();
              if (hasFightGangRequest()) {
                subBuilder.mergeFrom(getFightGangRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGangRequest(subBuilder.buildPartial());
              break;
            }
            case 154: {
              com.randioo.box.protocol.Fight.FightHuRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightHuRequest.newBuilder();
              if (hasFightHuRequest()) {
                subBuilder.mergeFrom(getFightHuRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightHuRequest(subBuilder.buildPartial());
              break;
            }
            case 162: {
              com.randioo.box.protocol.Fight.FightGuoRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightGuoRequest.newBuilder();
              if (hasFightGuoRequest()) {
                subBuilder.mergeFrom(getFightGuoRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightGuoRequest(subBuilder.buildPartial());
              break;
            }
            case 170: {
              com.randioo.box.protocol.Fight.FightChiRequest.Builder subBuilder = com.randioo.box.protocol.Fight.FightChiRequest.newBuilder();
              if (hasFightChiRequest()) {
                subBuilder.mergeFrom(getFightChiRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFightChiRequest(subBuilder.buildPartial());
              break;
            }
            case 178: {
              com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest.Builder subBuilder = com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest.newBuilder();
              if (hasMoneyExchangeRequest()) {
                subBuilder.mergeFrom(getMoneyExchangeRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMoneyExchangeRequest(subBuilder.buildPartial());
              break;
            }
            case 186: {
              com.randioo.box.protocol.Settings.SettingsRequest.Builder subBuilder = com.randioo.box.protocol.Settings.SettingsRequest.newBuilder();
              if (hasSettingsRequest()) {
                subBuilder.mergeFrom(getSettingsRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSettingsRequest(subBuilder.buildPartial());
              break;
            }
            case 194: {
              com.randioo.box.protocol.Settings.SettingsShowRequest.Builder subBuilder = com.randioo.box.protocol.Settings.SettingsShowRequest.newBuilder();
              if (hasSettingsShowRequest()) {
                subBuilder.mergeFrom(getSettingsShowRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSettingsShowRequest(subBuilder.buildPartial());
              break;
            }
            case 202: {
              com.randioo.box.protocol.Race.RaceJoinRaceRequest.Builder subBuilder = com.randioo.box.protocol.Race.RaceJoinRaceRequest.newBuilder();
              if (hasRaceJoinRaceRequest()) {
                subBuilder.mergeFrom(getRaceJoinRaceRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRaceJoinRaceRequest(subBuilder.buildPartial());
              break;
            }
            case 210: {
              com.randioo.box.protocol.Race.RaceShowQueueRequest.Builder subBuilder = com.randioo.box.protocol.Race.RaceShowQueueRequest.newBuilder();
              if (hasRaceShowQueueRequest()) {
                subBuilder.mergeFrom(getRaceShowQueueRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRaceShowQueueRequest(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .com.randioo.mahjong_public_server.protocol.HeartRequest HeartRequest = 1;
      public boolean hasHeartRequest() {
        return result.hasHeartRequest();
      }
      public com.randioo.box.protocol.Heart.HeartRequest getHeartRequest() {
        return result.getHeartRequest();
      }
      public Builder setHeartRequest(com.randioo.box.protocol.Heart.HeartRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHeartRequest = true;
        result.heartRequest_ = value;
        return this;
      }
      public Builder setHeartRequest(com.randioo.box.protocol.Heart.HeartRequest.Builder builderForValue) {
        result.hasHeartRequest = true;
        result.heartRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeHeartRequest(com.randioo.box.protocol.Heart.HeartRequest value) {
        if (result.hasHeartRequest() &&
            result.heartRequest_ != com.randioo.box.protocol.Heart.HeartRequest.getDefaultInstance()) {
          result.heartRequest_ =
            com.randioo.box.protocol.Heart.HeartRequest.newBuilder(result.heartRequest_).mergeFrom(value).buildPartial();
        } else {
          result.heartRequest_ = value;
        }
        result.hasHeartRequest = true;
        return this;
      }
      public Builder clearHeartRequest() {
        result.hasHeartRequest = false;
        result.heartRequest_ = com.randioo.box.protocol.Heart.HeartRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.LoginCheckAccountRequest LoginCheckAccountRequest = 2;
      public boolean hasLoginCheckAccountRequest() {
        return result.hasLoginCheckAccountRequest();
      }
      public com.randioo.box.protocol.Login.LoginCheckAccountRequest getLoginCheckAccountRequest() {
        return result.getLoginCheckAccountRequest();
      }
      public Builder setLoginCheckAccountRequest(com.randioo.box.protocol.Login.LoginCheckAccountRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLoginCheckAccountRequest = true;
        result.loginCheckAccountRequest_ = value;
        return this;
      }
      public Builder setLoginCheckAccountRequest(com.randioo.box.protocol.Login.LoginCheckAccountRequest.Builder builderForValue) {
        result.hasLoginCheckAccountRequest = true;
        result.loginCheckAccountRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeLoginCheckAccountRequest(com.randioo.box.protocol.Login.LoginCheckAccountRequest value) {
        if (result.hasLoginCheckAccountRequest() &&
            result.loginCheckAccountRequest_ != com.randioo.box.protocol.Login.LoginCheckAccountRequest.getDefaultInstance()) {
          result.loginCheckAccountRequest_ =
            com.randioo.box.protocol.Login.LoginCheckAccountRequest.newBuilder(result.loginCheckAccountRequest_).mergeFrom(value).buildPartial();
        } else {
          result.loginCheckAccountRequest_ = value;
        }
        result.hasLoginCheckAccountRequest = true;
        return this;
      }
      public Builder clearLoginCheckAccountRequest() {
        result.hasLoginCheckAccountRequest = false;
        result.loginCheckAccountRequest_ = com.randioo.box.protocol.Login.LoginCheckAccountRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.LoginCreateRoleRequest LoginCreateRoleRequest = 3;
      public boolean hasLoginCreateRoleRequest() {
        return result.hasLoginCreateRoleRequest();
      }
      public com.randioo.box.protocol.Login.LoginCreateRoleRequest getLoginCreateRoleRequest() {
        return result.getLoginCreateRoleRequest();
      }
      public Builder setLoginCreateRoleRequest(com.randioo.box.protocol.Login.LoginCreateRoleRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLoginCreateRoleRequest = true;
        result.loginCreateRoleRequest_ = value;
        return this;
      }
      public Builder setLoginCreateRoleRequest(com.randioo.box.protocol.Login.LoginCreateRoleRequest.Builder builderForValue) {
        result.hasLoginCreateRoleRequest = true;
        result.loginCreateRoleRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeLoginCreateRoleRequest(com.randioo.box.protocol.Login.LoginCreateRoleRequest value) {
        if (result.hasLoginCreateRoleRequest() &&
            result.loginCreateRoleRequest_ != com.randioo.box.protocol.Login.LoginCreateRoleRequest.getDefaultInstance()) {
          result.loginCreateRoleRequest_ =
            com.randioo.box.protocol.Login.LoginCreateRoleRequest.newBuilder(result.loginCreateRoleRequest_).mergeFrom(value).buildPartial();
        } else {
          result.loginCreateRoleRequest_ = value;
        }
        result.hasLoginCreateRoleRequest = true;
        return this;
      }
      public Builder clearLoginCreateRoleRequest() {
        result.hasLoginCreateRoleRequest = false;
        result.loginCreateRoleRequest_ = com.randioo.box.protocol.Login.LoginCreateRoleRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.LoginGetRoleDataRequest LoginGetRoleDataRequest = 4;
      public boolean hasLoginGetRoleDataRequest() {
        return result.hasLoginGetRoleDataRequest();
      }
      public com.randioo.box.protocol.Login.LoginGetRoleDataRequest getLoginGetRoleDataRequest() {
        return result.getLoginGetRoleDataRequest();
      }
      public Builder setLoginGetRoleDataRequest(com.randioo.box.protocol.Login.LoginGetRoleDataRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLoginGetRoleDataRequest = true;
        result.loginGetRoleDataRequest_ = value;
        return this;
      }
      public Builder setLoginGetRoleDataRequest(com.randioo.box.protocol.Login.LoginGetRoleDataRequest.Builder builderForValue) {
        result.hasLoginGetRoleDataRequest = true;
        result.loginGetRoleDataRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeLoginGetRoleDataRequest(com.randioo.box.protocol.Login.LoginGetRoleDataRequest value) {
        if (result.hasLoginGetRoleDataRequest() &&
            result.loginGetRoleDataRequest_ != com.randioo.box.protocol.Login.LoginGetRoleDataRequest.getDefaultInstance()) {
          result.loginGetRoleDataRequest_ =
            com.randioo.box.protocol.Login.LoginGetRoleDataRequest.newBuilder(result.loginGetRoleDataRequest_).mergeFrom(value).buildPartial();
        } else {
          result.loginGetRoleDataRequest_ = value;
        }
        result.hasLoginGetRoleDataRequest = true;
        return this;
      }
      public Builder clearLoginGetRoleDataRequest() {
        result.hasLoginGetRoleDataRequest = false;
        result.loginGetRoleDataRequest_ = com.randioo.box.protocol.Login.LoginGetRoleDataRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RoleRenameRequest RoleRenameRequest = 5;
      public boolean hasRoleRenameRequest() {
        return result.hasRoleRenameRequest();
      }
      public com.randioo.box.protocol.Role.RoleRenameRequest getRoleRenameRequest() {
        return result.getRoleRenameRequest();
      }
      public Builder setRoleRenameRequest(com.randioo.box.protocol.Role.RoleRenameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRoleRenameRequest = true;
        result.roleRenameRequest_ = value;
        return this;
      }
      public Builder setRoleRenameRequest(com.randioo.box.protocol.Role.RoleRenameRequest.Builder builderForValue) {
        result.hasRoleRenameRequest = true;
        result.roleRenameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeRoleRenameRequest(com.randioo.box.protocol.Role.RoleRenameRequest value) {
        if (result.hasRoleRenameRequest() &&
            result.roleRenameRequest_ != com.randioo.box.protocol.Role.RoleRenameRequest.getDefaultInstance()) {
          result.roleRenameRequest_ =
            com.randioo.box.protocol.Role.RoleRenameRequest.newBuilder(result.roleRenameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.roleRenameRequest_ = value;
        }
        result.hasRoleRenameRequest = true;
        return this;
      }
      public Builder clearRoleRenameRequest() {
        result.hasRoleRenameRequest = false;
        result.roleRenameRequest_ = com.randioo.box.protocol.Role.RoleRenameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RoleGetRoleDataRequest RoleGetRoleDataRequest = 6;
      public boolean hasRoleGetRoleDataRequest() {
        return result.hasRoleGetRoleDataRequest();
      }
      public com.randioo.box.protocol.Role.RoleGetRoleDataRequest getRoleGetRoleDataRequest() {
        return result.getRoleGetRoleDataRequest();
      }
      public Builder setRoleGetRoleDataRequest(com.randioo.box.protocol.Role.RoleGetRoleDataRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRoleGetRoleDataRequest = true;
        result.roleGetRoleDataRequest_ = value;
        return this;
      }
      public Builder setRoleGetRoleDataRequest(com.randioo.box.protocol.Role.RoleGetRoleDataRequest.Builder builderForValue) {
        result.hasRoleGetRoleDataRequest = true;
        result.roleGetRoleDataRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeRoleGetRoleDataRequest(com.randioo.box.protocol.Role.RoleGetRoleDataRequest value) {
        if (result.hasRoleGetRoleDataRequest() &&
            result.roleGetRoleDataRequest_ != com.randioo.box.protocol.Role.RoleGetRoleDataRequest.getDefaultInstance()) {
          result.roleGetRoleDataRequest_ =
            com.randioo.box.protocol.Role.RoleGetRoleDataRequest.newBuilder(result.roleGetRoleDataRequest_).mergeFrom(value).buildPartial();
        } else {
          result.roleGetRoleDataRequest_ = value;
        }
        result.hasRoleGetRoleDataRequest = true;
        return this;
      }
      public Builder clearRoleGetRoleDataRequest() {
        result.hasRoleGetRoleDataRequest = false;
        result.roleGetRoleDataRequest_ = com.randioo.box.protocol.Role.RoleGetRoleDataRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.MatchCreateGameRequest MatchCreateGameRequest = 7;
      public boolean hasMatchCreateGameRequest() {
        return result.hasMatchCreateGameRequest();
      }
      public com.randioo.box.protocol.Match.MatchCreateGameRequest getMatchCreateGameRequest() {
        return result.getMatchCreateGameRequest();
      }
      public Builder setMatchCreateGameRequest(com.randioo.box.protocol.Match.MatchCreateGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchCreateGameRequest = true;
        result.matchCreateGameRequest_ = value;
        return this;
      }
      public Builder setMatchCreateGameRequest(com.randioo.box.protocol.Match.MatchCreateGameRequest.Builder builderForValue) {
        result.hasMatchCreateGameRequest = true;
        result.matchCreateGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchCreateGameRequest(com.randioo.box.protocol.Match.MatchCreateGameRequest value) {
        if (result.hasMatchCreateGameRequest() &&
            result.matchCreateGameRequest_ != com.randioo.box.protocol.Match.MatchCreateGameRequest.getDefaultInstance()) {
          result.matchCreateGameRequest_ =
            com.randioo.box.protocol.Match.MatchCreateGameRequest.newBuilder(result.matchCreateGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchCreateGameRequest_ = value;
        }
        result.hasMatchCreateGameRequest = true;
        return this;
      }
      public Builder clearMatchCreateGameRequest() {
        result.hasMatchCreateGameRequest = false;
        result.matchCreateGameRequest_ = com.randioo.box.protocol.Match.MatchCreateGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.MatchJoinGameRequest MatchJoinGameRequest = 8;
      public boolean hasMatchJoinGameRequest() {
        return result.hasMatchJoinGameRequest();
      }
      public com.randioo.box.protocol.Match.MatchJoinGameRequest getMatchJoinGameRequest() {
        return result.getMatchJoinGameRequest();
      }
      public Builder setMatchJoinGameRequest(com.randioo.box.protocol.Match.MatchJoinGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchJoinGameRequest = true;
        result.matchJoinGameRequest_ = value;
        return this;
      }
      public Builder setMatchJoinGameRequest(com.randioo.box.protocol.Match.MatchJoinGameRequest.Builder builderForValue) {
        result.hasMatchJoinGameRequest = true;
        result.matchJoinGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchJoinGameRequest(com.randioo.box.protocol.Match.MatchJoinGameRequest value) {
        if (result.hasMatchJoinGameRequest() &&
            result.matchJoinGameRequest_ != com.randioo.box.protocol.Match.MatchJoinGameRequest.getDefaultInstance()) {
          result.matchJoinGameRequest_ =
            com.randioo.box.protocol.Match.MatchJoinGameRequest.newBuilder(result.matchJoinGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchJoinGameRequest_ = value;
        }
        result.hasMatchJoinGameRequest = true;
        return this;
      }
      public Builder clearMatchJoinGameRequest() {
        result.hasMatchJoinGameRequest = false;
        result.matchJoinGameRequest_ = com.randioo.box.protocol.Match.MatchJoinGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.MatchCheckRoomRequest MatchCheckRoomRequest = 9;
      public boolean hasMatchCheckRoomRequest() {
        return result.hasMatchCheckRoomRequest();
      }
      public com.randioo.box.protocol.Match.MatchCheckRoomRequest getMatchCheckRoomRequest() {
        return result.getMatchCheckRoomRequest();
      }
      public Builder setMatchCheckRoomRequest(com.randioo.box.protocol.Match.MatchCheckRoomRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMatchCheckRoomRequest = true;
        result.matchCheckRoomRequest_ = value;
        return this;
      }
      public Builder setMatchCheckRoomRequest(com.randioo.box.protocol.Match.MatchCheckRoomRequest.Builder builderForValue) {
        result.hasMatchCheckRoomRequest = true;
        result.matchCheckRoomRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMatchCheckRoomRequest(com.randioo.box.protocol.Match.MatchCheckRoomRequest value) {
        if (result.hasMatchCheckRoomRequest() &&
            result.matchCheckRoomRequest_ != com.randioo.box.protocol.Match.MatchCheckRoomRequest.getDefaultInstance()) {
          result.matchCheckRoomRequest_ =
            com.randioo.box.protocol.Match.MatchCheckRoomRequest.newBuilder(result.matchCheckRoomRequest_).mergeFrom(value).buildPartial();
        } else {
          result.matchCheckRoomRequest_ = value;
        }
        result.hasMatchCheckRoomRequest = true;
        return this;
      }
      public Builder clearMatchCheckRoomRequest() {
        result.hasMatchCheckRoomRequest = false;
        result.matchCheckRoomRequest_ = com.randioo.box.protocol.Match.MatchCheckRoomRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightReadyRequest FightReadyRequest = 10;
      public boolean hasFightReadyRequest() {
        return result.hasFightReadyRequest();
      }
      public com.randioo.box.protocol.Fight.FightReadyRequest getFightReadyRequest() {
        return result.getFightReadyRequest();
      }
      public Builder setFightReadyRequest(com.randioo.box.protocol.Fight.FightReadyRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightReadyRequest = true;
        result.fightReadyRequest_ = value;
        return this;
      }
      public Builder setFightReadyRequest(com.randioo.box.protocol.Fight.FightReadyRequest.Builder builderForValue) {
        result.hasFightReadyRequest = true;
        result.fightReadyRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightReadyRequest(com.randioo.box.protocol.Fight.FightReadyRequest value) {
        if (result.hasFightReadyRequest() &&
            result.fightReadyRequest_ != com.randioo.box.protocol.Fight.FightReadyRequest.getDefaultInstance()) {
          result.fightReadyRequest_ =
            com.randioo.box.protocol.Fight.FightReadyRequest.newBuilder(result.fightReadyRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightReadyRequest_ = value;
        }
        result.hasFightReadyRequest = true;
        return this;
      }
      public Builder clearFightReadyRequest() {
        result.hasFightReadyRequest = false;
        result.fightReadyRequest_ = com.randioo.box.protocol.Fight.FightReadyRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightExitGameRequest FightExitGameRequest = 11;
      public boolean hasFightExitGameRequest() {
        return result.hasFightExitGameRequest();
      }
      public com.randioo.box.protocol.Fight.FightExitGameRequest getFightExitGameRequest() {
        return result.getFightExitGameRequest();
      }
      public Builder setFightExitGameRequest(com.randioo.box.protocol.Fight.FightExitGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightExitGameRequest = true;
        result.fightExitGameRequest_ = value;
        return this;
      }
      public Builder setFightExitGameRequest(com.randioo.box.protocol.Fight.FightExitGameRequest.Builder builderForValue) {
        result.hasFightExitGameRequest = true;
        result.fightExitGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightExitGameRequest(com.randioo.box.protocol.Fight.FightExitGameRequest value) {
        if (result.hasFightExitGameRequest() &&
            result.fightExitGameRequest_ != com.randioo.box.protocol.Fight.FightExitGameRequest.getDefaultInstance()) {
          result.fightExitGameRequest_ =
            com.randioo.box.protocol.Fight.FightExitGameRequest.newBuilder(result.fightExitGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightExitGameRequest_ = value;
        }
        result.hasFightExitGameRequest = true;
        return this;
      }
      public Builder clearFightExitGameRequest() {
        result.hasFightExitGameRequest = false;
        result.fightExitGameRequest_ = com.randioo.box.protocol.Fight.FightExitGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightApplyExitGameRequest FightApplyExitGameRequest = 12;
      public boolean hasFightApplyExitGameRequest() {
        return result.hasFightApplyExitGameRequest();
      }
      public com.randioo.box.protocol.Fight.FightApplyExitGameRequest getFightApplyExitGameRequest() {
        return result.getFightApplyExitGameRequest();
      }
      public Builder setFightApplyExitGameRequest(com.randioo.box.protocol.Fight.FightApplyExitGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightApplyExitGameRequest = true;
        result.fightApplyExitGameRequest_ = value;
        return this;
      }
      public Builder setFightApplyExitGameRequest(com.randioo.box.protocol.Fight.FightApplyExitGameRequest.Builder builderForValue) {
        result.hasFightApplyExitGameRequest = true;
        result.fightApplyExitGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightApplyExitGameRequest(com.randioo.box.protocol.Fight.FightApplyExitGameRequest value) {
        if (result.hasFightApplyExitGameRequest() &&
            result.fightApplyExitGameRequest_ != com.randioo.box.protocol.Fight.FightApplyExitGameRequest.getDefaultInstance()) {
          result.fightApplyExitGameRequest_ =
            com.randioo.box.protocol.Fight.FightApplyExitGameRequest.newBuilder(result.fightApplyExitGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightApplyExitGameRequest_ = value;
        }
        result.hasFightApplyExitGameRequest = true;
        return this;
      }
      public Builder clearFightApplyExitGameRequest() {
        result.hasFightApplyExitGameRequest = false;
        result.fightApplyExitGameRequest_ = com.randioo.box.protocol.Fight.FightApplyExitGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightAgreeExitGameRequest FightAgreeExitGameRequest = 13;
      public boolean hasFightAgreeExitGameRequest() {
        return result.hasFightAgreeExitGameRequest();
      }
      public com.randioo.box.protocol.Fight.FightAgreeExitGameRequest getFightAgreeExitGameRequest() {
        return result.getFightAgreeExitGameRequest();
      }
      public Builder setFightAgreeExitGameRequest(com.randioo.box.protocol.Fight.FightAgreeExitGameRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightAgreeExitGameRequest = true;
        result.fightAgreeExitGameRequest_ = value;
        return this;
      }
      public Builder setFightAgreeExitGameRequest(com.randioo.box.protocol.Fight.FightAgreeExitGameRequest.Builder builderForValue) {
        result.hasFightAgreeExitGameRequest = true;
        result.fightAgreeExitGameRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightAgreeExitGameRequest(com.randioo.box.protocol.Fight.FightAgreeExitGameRequest value) {
        if (result.hasFightAgreeExitGameRequest() &&
            result.fightAgreeExitGameRequest_ != com.randioo.box.protocol.Fight.FightAgreeExitGameRequest.getDefaultInstance()) {
          result.fightAgreeExitGameRequest_ =
            com.randioo.box.protocol.Fight.FightAgreeExitGameRequest.newBuilder(result.fightAgreeExitGameRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightAgreeExitGameRequest_ = value;
        }
        result.hasFightAgreeExitGameRequest = true;
        return this;
      }
      public Builder clearFightAgreeExitGameRequest() {
        result.hasFightAgreeExitGameRequest = false;
        result.fightAgreeExitGameRequest_ = com.randioo.box.protocol.Fight.FightAgreeExitGameRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightSendCardRequest FightSendCardRequest = 14;
      public boolean hasFightSendCardRequest() {
        return result.hasFightSendCardRequest();
      }
      public com.randioo.box.protocol.Fight.FightSendCardRequest getFightSendCardRequest() {
        return result.getFightSendCardRequest();
      }
      public Builder setFightSendCardRequest(com.randioo.box.protocol.Fight.FightSendCardRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightSendCardRequest = true;
        result.fightSendCardRequest_ = value;
        return this;
      }
      public Builder setFightSendCardRequest(com.randioo.box.protocol.Fight.FightSendCardRequest.Builder builderForValue) {
        result.hasFightSendCardRequest = true;
        result.fightSendCardRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightSendCardRequest(com.randioo.box.protocol.Fight.FightSendCardRequest value) {
        if (result.hasFightSendCardRequest() &&
            result.fightSendCardRequest_ != com.randioo.box.protocol.Fight.FightSendCardRequest.getDefaultInstance()) {
          result.fightSendCardRequest_ =
            com.randioo.box.protocol.Fight.FightSendCardRequest.newBuilder(result.fightSendCardRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightSendCardRequest_ = value;
        }
        result.hasFightSendCardRequest = true;
        return this;
      }
      public Builder clearFightSendCardRequest() {
        result.hasFightSendCardRequest = false;
        result.fightSendCardRequest_ = com.randioo.box.protocol.Fight.FightSendCardRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightRecommandRequest FightRecommandRequest = 15;
      public boolean hasFightRecommandRequest() {
        return result.hasFightRecommandRequest();
      }
      public com.randioo.box.protocol.Fight.FightRecommandRequest getFightRecommandRequest() {
        return result.getFightRecommandRequest();
      }
      public Builder setFightRecommandRequest(com.randioo.box.protocol.Fight.FightRecommandRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightRecommandRequest = true;
        result.fightRecommandRequest_ = value;
        return this;
      }
      public Builder setFightRecommandRequest(com.randioo.box.protocol.Fight.FightRecommandRequest.Builder builderForValue) {
        result.hasFightRecommandRequest = true;
        result.fightRecommandRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightRecommandRequest(com.randioo.box.protocol.Fight.FightRecommandRequest value) {
        if (result.hasFightRecommandRequest() &&
            result.fightRecommandRequest_ != com.randioo.box.protocol.Fight.FightRecommandRequest.getDefaultInstance()) {
          result.fightRecommandRequest_ =
            com.randioo.box.protocol.Fight.FightRecommandRequest.newBuilder(result.fightRecommandRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightRecommandRequest_ = value;
        }
        result.hasFightRecommandRequest = true;
        return this;
      }
      public Builder clearFightRecommandRequest() {
        result.hasFightRecommandRequest = false;
        result.fightRecommandRequest_ = com.randioo.box.protocol.Fight.FightRecommandRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightGetlastRoundRequest FightGetlastRoundRequest = 16;
      public boolean hasFightGetlastRoundRequest() {
        return result.hasFightGetlastRoundRequest();
      }
      public com.randioo.box.protocol.Fight.FightGetlastRoundRequest getFightGetlastRoundRequest() {
        return result.getFightGetlastRoundRequest();
      }
      public Builder setFightGetlastRoundRequest(com.randioo.box.protocol.Fight.FightGetlastRoundRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGetlastRoundRequest = true;
        result.fightGetlastRoundRequest_ = value;
        return this;
      }
      public Builder setFightGetlastRoundRequest(com.randioo.box.protocol.Fight.FightGetlastRoundRequest.Builder builderForValue) {
        result.hasFightGetlastRoundRequest = true;
        result.fightGetlastRoundRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGetlastRoundRequest(com.randioo.box.protocol.Fight.FightGetlastRoundRequest value) {
        if (result.hasFightGetlastRoundRequest() &&
            result.fightGetlastRoundRequest_ != com.randioo.box.protocol.Fight.FightGetlastRoundRequest.getDefaultInstance()) {
          result.fightGetlastRoundRequest_ =
            com.randioo.box.protocol.Fight.FightGetlastRoundRequest.newBuilder(result.fightGetlastRoundRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightGetlastRoundRequest_ = value;
        }
        result.hasFightGetlastRoundRequest = true;
        return this;
      }
      public Builder clearFightGetlastRoundRequest() {
        result.hasFightGetlastRoundRequest = false;
        result.fightGetlastRoundRequest_ = com.randioo.box.protocol.Fight.FightGetlastRoundRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightPengRequest FightPengRequest = 17;
      public boolean hasFightPengRequest() {
        return result.hasFightPengRequest();
      }
      public com.randioo.box.protocol.Fight.FightPengRequest getFightPengRequest() {
        return result.getFightPengRequest();
      }
      public Builder setFightPengRequest(com.randioo.box.protocol.Fight.FightPengRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightPengRequest = true;
        result.fightPengRequest_ = value;
        return this;
      }
      public Builder setFightPengRequest(com.randioo.box.protocol.Fight.FightPengRequest.Builder builderForValue) {
        result.hasFightPengRequest = true;
        result.fightPengRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightPengRequest(com.randioo.box.protocol.Fight.FightPengRequest value) {
        if (result.hasFightPengRequest() &&
            result.fightPengRequest_ != com.randioo.box.protocol.Fight.FightPengRequest.getDefaultInstance()) {
          result.fightPengRequest_ =
            com.randioo.box.protocol.Fight.FightPengRequest.newBuilder(result.fightPengRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightPengRequest_ = value;
        }
        result.hasFightPengRequest = true;
        return this;
      }
      public Builder clearFightPengRequest() {
        result.hasFightPengRequest = false;
        result.fightPengRequest_ = com.randioo.box.protocol.Fight.FightPengRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightGangRequest FightGangRequest = 18;
      public boolean hasFightGangRequest() {
        return result.hasFightGangRequest();
      }
      public com.randioo.box.protocol.Fight.FightGangRequest getFightGangRequest() {
        return result.getFightGangRequest();
      }
      public Builder setFightGangRequest(com.randioo.box.protocol.Fight.FightGangRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGangRequest = true;
        result.fightGangRequest_ = value;
        return this;
      }
      public Builder setFightGangRequest(com.randioo.box.protocol.Fight.FightGangRequest.Builder builderForValue) {
        result.hasFightGangRequest = true;
        result.fightGangRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGangRequest(com.randioo.box.protocol.Fight.FightGangRequest value) {
        if (result.hasFightGangRequest() &&
            result.fightGangRequest_ != com.randioo.box.protocol.Fight.FightGangRequest.getDefaultInstance()) {
          result.fightGangRequest_ =
            com.randioo.box.protocol.Fight.FightGangRequest.newBuilder(result.fightGangRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightGangRequest_ = value;
        }
        result.hasFightGangRequest = true;
        return this;
      }
      public Builder clearFightGangRequest() {
        result.hasFightGangRequest = false;
        result.fightGangRequest_ = com.randioo.box.protocol.Fight.FightGangRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightHuRequest FightHuRequest = 19;
      public boolean hasFightHuRequest() {
        return result.hasFightHuRequest();
      }
      public com.randioo.box.protocol.Fight.FightHuRequest getFightHuRequest() {
        return result.getFightHuRequest();
      }
      public Builder setFightHuRequest(com.randioo.box.protocol.Fight.FightHuRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightHuRequest = true;
        result.fightHuRequest_ = value;
        return this;
      }
      public Builder setFightHuRequest(com.randioo.box.protocol.Fight.FightHuRequest.Builder builderForValue) {
        result.hasFightHuRequest = true;
        result.fightHuRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightHuRequest(com.randioo.box.protocol.Fight.FightHuRequest value) {
        if (result.hasFightHuRequest() &&
            result.fightHuRequest_ != com.randioo.box.protocol.Fight.FightHuRequest.getDefaultInstance()) {
          result.fightHuRequest_ =
            com.randioo.box.protocol.Fight.FightHuRequest.newBuilder(result.fightHuRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightHuRequest_ = value;
        }
        result.hasFightHuRequest = true;
        return this;
      }
      public Builder clearFightHuRequest() {
        result.hasFightHuRequest = false;
        result.fightHuRequest_ = com.randioo.box.protocol.Fight.FightHuRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightGuoRequest FightGuoRequest = 20;
      public boolean hasFightGuoRequest() {
        return result.hasFightGuoRequest();
      }
      public com.randioo.box.protocol.Fight.FightGuoRequest getFightGuoRequest() {
        return result.getFightGuoRequest();
      }
      public Builder setFightGuoRequest(com.randioo.box.protocol.Fight.FightGuoRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightGuoRequest = true;
        result.fightGuoRequest_ = value;
        return this;
      }
      public Builder setFightGuoRequest(com.randioo.box.protocol.Fight.FightGuoRequest.Builder builderForValue) {
        result.hasFightGuoRequest = true;
        result.fightGuoRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightGuoRequest(com.randioo.box.protocol.Fight.FightGuoRequest value) {
        if (result.hasFightGuoRequest() &&
            result.fightGuoRequest_ != com.randioo.box.protocol.Fight.FightGuoRequest.getDefaultInstance()) {
          result.fightGuoRequest_ =
            com.randioo.box.protocol.Fight.FightGuoRequest.newBuilder(result.fightGuoRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightGuoRequest_ = value;
        }
        result.hasFightGuoRequest = true;
        return this;
      }
      public Builder clearFightGuoRequest() {
        result.hasFightGuoRequest = false;
        result.fightGuoRequest_ = com.randioo.box.protocol.Fight.FightGuoRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.FightChiRequest FightChiRequest = 21;
      public boolean hasFightChiRequest() {
        return result.hasFightChiRequest();
      }
      public com.randioo.box.protocol.Fight.FightChiRequest getFightChiRequest() {
        return result.getFightChiRequest();
      }
      public Builder setFightChiRequest(com.randioo.box.protocol.Fight.FightChiRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightChiRequest = true;
        result.fightChiRequest_ = value;
        return this;
      }
      public Builder setFightChiRequest(com.randioo.box.protocol.Fight.FightChiRequest.Builder builderForValue) {
        result.hasFightChiRequest = true;
        result.fightChiRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeFightChiRequest(com.randioo.box.protocol.Fight.FightChiRequest value) {
        if (result.hasFightChiRequest() &&
            result.fightChiRequest_ != com.randioo.box.protocol.Fight.FightChiRequest.getDefaultInstance()) {
          result.fightChiRequest_ =
            com.randioo.box.protocol.Fight.FightChiRequest.newBuilder(result.fightChiRequest_).mergeFrom(value).buildPartial();
        } else {
          result.fightChiRequest_ = value;
        }
        result.hasFightChiRequest = true;
        return this;
      }
      public Builder clearFightChiRequest() {
        result.hasFightChiRequest = false;
        result.fightChiRequest_ = com.randioo.box.protocol.Fight.FightChiRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.MoneyExchangeRequest MoneyExchangeRequest = 22;
      public boolean hasMoneyExchangeRequest() {
        return result.hasMoneyExchangeRequest();
      }
      public com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest getMoneyExchangeRequest() {
        return result.getMoneyExchangeRequest();
      }
      public Builder setMoneyExchangeRequest(com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasMoneyExchangeRequest = true;
        result.moneyExchangeRequest_ = value;
        return this;
      }
      public Builder setMoneyExchangeRequest(com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest.Builder builderForValue) {
        result.hasMoneyExchangeRequest = true;
        result.moneyExchangeRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeMoneyExchangeRequest(com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest value) {
        if (result.hasMoneyExchangeRequest() &&
            result.moneyExchangeRequest_ != com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest.getDefaultInstance()) {
          result.moneyExchangeRequest_ =
            com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest.newBuilder(result.moneyExchangeRequest_).mergeFrom(value).buildPartial();
        } else {
          result.moneyExchangeRequest_ = value;
        }
        result.hasMoneyExchangeRequest = true;
        return this;
      }
      public Builder clearMoneyExchangeRequest() {
        result.hasMoneyExchangeRequest = false;
        result.moneyExchangeRequest_ = com.randioo.box.protocol.MoneyExchange.MoneyExchangeRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SettingsRequest SettingsRequest = 23;
      public boolean hasSettingsRequest() {
        return result.hasSettingsRequest();
      }
      public com.randioo.box.protocol.Settings.SettingsRequest getSettingsRequest() {
        return result.getSettingsRequest();
      }
      public Builder setSettingsRequest(com.randioo.box.protocol.Settings.SettingsRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSettingsRequest = true;
        result.settingsRequest_ = value;
        return this;
      }
      public Builder setSettingsRequest(com.randioo.box.protocol.Settings.SettingsRequest.Builder builderForValue) {
        result.hasSettingsRequest = true;
        result.settingsRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeSettingsRequest(com.randioo.box.protocol.Settings.SettingsRequest value) {
        if (result.hasSettingsRequest() &&
            result.settingsRequest_ != com.randioo.box.protocol.Settings.SettingsRequest.getDefaultInstance()) {
          result.settingsRequest_ =
            com.randioo.box.protocol.Settings.SettingsRequest.newBuilder(result.settingsRequest_).mergeFrom(value).buildPartial();
        } else {
          result.settingsRequest_ = value;
        }
        result.hasSettingsRequest = true;
        return this;
      }
      public Builder clearSettingsRequest() {
        result.hasSettingsRequest = false;
        result.settingsRequest_ = com.randioo.box.protocol.Settings.SettingsRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.SettingsShowRequest SettingsShowRequest = 24;
      public boolean hasSettingsShowRequest() {
        return result.hasSettingsShowRequest();
      }
      public com.randioo.box.protocol.Settings.SettingsShowRequest getSettingsShowRequest() {
        return result.getSettingsShowRequest();
      }
      public Builder setSettingsShowRequest(com.randioo.box.protocol.Settings.SettingsShowRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSettingsShowRequest = true;
        result.settingsShowRequest_ = value;
        return this;
      }
      public Builder setSettingsShowRequest(com.randioo.box.protocol.Settings.SettingsShowRequest.Builder builderForValue) {
        result.hasSettingsShowRequest = true;
        result.settingsShowRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeSettingsShowRequest(com.randioo.box.protocol.Settings.SettingsShowRequest value) {
        if (result.hasSettingsShowRequest() &&
            result.settingsShowRequest_ != com.randioo.box.protocol.Settings.SettingsShowRequest.getDefaultInstance()) {
          result.settingsShowRequest_ =
            com.randioo.box.protocol.Settings.SettingsShowRequest.newBuilder(result.settingsShowRequest_).mergeFrom(value).buildPartial();
        } else {
          result.settingsShowRequest_ = value;
        }
        result.hasSettingsShowRequest = true;
        return this;
      }
      public Builder clearSettingsShowRequest() {
        result.hasSettingsShowRequest = false;
        result.settingsShowRequest_ = com.randioo.box.protocol.Settings.SettingsShowRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RaceJoinRaceRequest RaceJoinRaceRequest = 25;
      public boolean hasRaceJoinRaceRequest() {
        return result.hasRaceJoinRaceRequest();
      }
      public com.randioo.box.protocol.Race.RaceJoinRaceRequest getRaceJoinRaceRequest() {
        return result.getRaceJoinRaceRequest();
      }
      public Builder setRaceJoinRaceRequest(com.randioo.box.protocol.Race.RaceJoinRaceRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRaceJoinRaceRequest = true;
        result.raceJoinRaceRequest_ = value;
        return this;
      }
      public Builder setRaceJoinRaceRequest(com.randioo.box.protocol.Race.RaceJoinRaceRequest.Builder builderForValue) {
        result.hasRaceJoinRaceRequest = true;
        result.raceJoinRaceRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeRaceJoinRaceRequest(com.randioo.box.protocol.Race.RaceJoinRaceRequest value) {
        if (result.hasRaceJoinRaceRequest() &&
            result.raceJoinRaceRequest_ != com.randioo.box.protocol.Race.RaceJoinRaceRequest.getDefaultInstance()) {
          result.raceJoinRaceRequest_ =
            com.randioo.box.protocol.Race.RaceJoinRaceRequest.newBuilder(result.raceJoinRaceRequest_).mergeFrom(value).buildPartial();
        } else {
          result.raceJoinRaceRequest_ = value;
        }
        result.hasRaceJoinRaceRequest = true;
        return this;
      }
      public Builder clearRaceJoinRaceRequest() {
        result.hasRaceJoinRaceRequest = false;
        result.raceJoinRaceRequest_ = com.randioo.box.protocol.Race.RaceJoinRaceRequest.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RaceShowQueueRequest RaceShowQueueRequest = 26;
      public boolean hasRaceShowQueueRequest() {
        return result.hasRaceShowQueueRequest();
      }
      public com.randioo.box.protocol.Race.RaceShowQueueRequest getRaceShowQueueRequest() {
        return result.getRaceShowQueueRequest();
      }
      public Builder setRaceShowQueueRequest(com.randioo.box.protocol.Race.RaceShowQueueRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRaceShowQueueRequest = true;
        result.raceShowQueueRequest_ = value;
        return this;
      }
      public Builder setRaceShowQueueRequest(com.randioo.box.protocol.Race.RaceShowQueueRequest.Builder builderForValue) {
        result.hasRaceShowQueueRequest = true;
        result.raceShowQueueRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeRaceShowQueueRequest(com.randioo.box.protocol.Race.RaceShowQueueRequest value) {
        if (result.hasRaceShowQueueRequest() &&
            result.raceShowQueueRequest_ != com.randioo.box.protocol.Race.RaceShowQueueRequest.getDefaultInstance()) {
          result.raceShowQueueRequest_ =
            com.randioo.box.protocol.Race.RaceShowQueueRequest.newBuilder(result.raceShowQueueRequest_).mergeFrom(value).buildPartial();
        } else {
          result.raceShowQueueRequest_ = value;
        }
        result.hasRaceShowQueueRequest = true;
        return this;
      }
      public Builder clearRaceShowQueueRequest() {
        result.hasRaceShowQueueRequest = false;
        result.raceShowQueueRequest_ = com.randioo.box.protocol.Race.RaceShowQueueRequest.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.CS)
    }
    
    static {
      defaultInstance = new CS(true);
      com.randioo.box.protocol.ClientMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.CS)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_CS_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_CS_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023ClientMessage.proto\022*com.randioo.mahjo" +
      "ng_public_server.protocol\032\013Login.proto\032\n" +
      "Role.proto\032\013Match.proto\032\013Fight.proto\032\023Mo" +
      "neyExchange.proto\032\016Settings.proto\032\nRace." +
      "proto\032\013Heart.proto\"\244\023\n\002CS\022N\n\014HeartReques" +
      "t\030\001 \001(\01328.com.randioo.mahjong_public_ser" +
      "ver.protocol.HeartRequest\022f\n\030LoginCheckA" +
      "ccountRequest\030\002 \001(\0132D.com.randioo.mahjon" +
      "g_public_server.protocol.LoginCheckAccou" +
      "ntRequest\022b\n\026LoginCreateRoleRequest\030\003 \001(",
      "\0132B.com.randioo.mahjong_public_server.pr" +
      "otocol.LoginCreateRoleRequest\022d\n\027LoginGe" +
      "tRoleDataRequest\030\004 \001(\0132C.com.randioo.mah" +
      "jong_public_server.protocol.LoginGetRole" +
      "DataRequest\022X\n\021RoleRenameRequest\030\005 \001(\0132=" +
      ".com.randioo.mahjong_public_server.proto" +
      "col.RoleRenameRequest\022b\n\026RoleGetRoleData" +
      "Request\030\006 \001(\0132B.com.randioo.mahjong_publ" +
      "ic_server.protocol.RoleGetRoleDataReques" +
      "t\022b\n\026MatchCreateGameRequest\030\007 \001(\0132B.com.",
      "randioo.mahjong_public_server.protocol.M" +
      "atchCreateGameRequest\022^\n\024MatchJoinGameRe" +
      "quest\030\010 \001(\0132@.com.randioo.mahjong_public" +
      "_server.protocol.MatchJoinGameRequest\022`\n" +
      "\025MatchCheckRoomRequest\030\t \001(\0132A.com.randi" +
      "oo.mahjong_public_server.protocol.MatchC" +
      "heckRoomRequest\022X\n\021FightReadyRequest\030\n \001" +
      "(\0132=.com.randioo.mahjong_public_server.p" +
      "rotocol.FightReadyRequest\022^\n\024FightExitGa" +
      "meRequest\030\013 \001(\0132@.com.randioo.mahjong_pu",
      "blic_server.protocol.FightExitGameReques" +
      "t\022h\n\031FightApplyExitGameRequest\030\014 \001(\0132E.c" +
      "om.randioo.mahjong_public_server.protoco" +
      "l.FightApplyExitGameRequest\022h\n\031FightAgre" +
      "eExitGameRequest\030\r \001(\0132E.com.randioo.mah" +
      "jong_public_server.protocol.FightAgreeEx" +
      "itGameRequest\022^\n\024FightSendCardRequest\030\016 " +
      "\001(\0132@.com.randioo.mahjong_public_server." +
      "protocol.FightSendCardRequest\022`\n\025FightRe" +
      "commandRequest\030\017 \001(\0132A.com.randioo.mahjo",
      "ng_public_server.protocol.FightRecommand" +
      "Request\022f\n\030FightGetlastRoundRequest\030\020 \001(" +
      "\0132D.com.randioo.mahjong_public_server.pr" +
      "otocol.FightGetlastRoundRequest\022V\n\020Fight" +
      "PengRequest\030\021 \001(\0132<.com.randioo.mahjong_" +
      "public_server.protocol.FightPengRequest\022" +
      "V\n\020FightGangRequest\030\022 \001(\0132<.com.randioo." +
      "mahjong_public_server.protocol.FightGang" +
      "Request\022R\n\016FightHuRequest\030\023 \001(\0132:.com.ra" +
      "ndioo.mahjong_public_server.protocol.Fig",
      "htHuRequest\022T\n\017FightGuoRequest\030\024 \001(\0132;.c" +
      "om.randioo.mahjong_public_server.protoco" +
      "l.FightGuoRequest\022T\n\017FightChiRequest\030\025 \001" +
      "(\0132;.com.randioo.mahjong_public_server.p" +
      "rotocol.FightChiRequest\022^\n\024MoneyExchange" +
      "Request\030\026 \001(\0132@.com.randioo.mahjong_publ" +
      "ic_server.protocol.MoneyExchangeRequest\022" +
      "T\n\017SettingsRequest\030\027 \001(\0132;.com.randioo.m" +
      "ahjong_public_server.protocol.SettingsRe" +
      "quest\022\\\n\023SettingsShowRequest\030\030 \001(\0132?.com",
      ".randioo.mahjong_public_server.protocol." +
      "SettingsShowRequest\022\\\n\023RaceJoinRaceReque" +
      "st\030\031 \001(\0132?.com.randioo.mahjong_public_se" +
      "rver.protocol.RaceJoinRaceRequest\022^\n\024Rac" +
      "eShowQueueRequest\030\032 \001(\0132@.com.randioo.ma" +
      "hjong_public_server.protocol.RaceShowQue" +
      "ueRequest"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_randioo_mahjong_public_server_protocol_CS_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_randioo_mahjong_public_server_protocol_CS_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_CS_descriptor,
              new java.lang.String[] { "HeartRequest", "LoginCheckAccountRequest", "LoginCreateRoleRequest", "LoginGetRoleDataRequest", "RoleRenameRequest", "RoleGetRoleDataRequest", "MatchCreateGameRequest", "MatchJoinGameRequest", "MatchCheckRoomRequest", "FightReadyRequest", "FightExitGameRequest", "FightApplyExitGameRequest", "FightAgreeExitGameRequest", "FightSendCardRequest", "FightRecommandRequest", "FightGetlastRoundRequest", "FightPengRequest", "FightGangRequest", "FightHuRequest", "FightGuoRequest", "FightChiRequest", "MoneyExchangeRequest", "SettingsRequest", "SettingsShowRequest", "RaceJoinRaceRequest", "RaceShowQueueRequest", },
              com.randioo.box.protocol.ClientMessage.CS.class,
              com.randioo.box.protocol.ClientMessage.CS.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.randioo.box.protocol.Login.getDescriptor(),
          com.randioo.box.protocol.Role.getDescriptor(),
          com.randioo.box.protocol.Match.getDescriptor(),
          com.randioo.box.protocol.Fight.getDescriptor(),
          com.randioo.box.protocol.MoneyExchange.getDescriptor(),
          com.randioo.box.protocol.Settings.getDescriptor(),
          com.randioo.box.protocol.Race.getDescriptor(),
          com.randioo.box.protocol.Heart.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
